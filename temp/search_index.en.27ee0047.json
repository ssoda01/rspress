[{"id":0,"title":"","content":"","routePath":"/404","lang":"en","toc":[],"domain":"","frontmatter":{"pageType":"custom"},"version":""},{"id":1,"title":"Internal Components","content":"#\n\n\nBadge#\n\nThe Badge component is used to display a badge. For example:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\n\nHelmet#\n\nIt is generally used to set custom head content in documents (using\nreact-helmet-async at the underlying level). The usage is as follows:\n\n\n\n\nHomeFeature#\n\nFeature component in Hero page, look the effect in this website.\n\n\n\n\nHomeHero#\n\nHero component in Hero page.\n\n\n\n\nLastUpdated#\n\nThe LastUpdated component is used to display the last update time of the current\npage. For example:\n\n\n\nTIP\n\nIf lastUpdated: true is not configured in the default theme, you need to install\nand register the @rspress/plugin-last-updated plugin.\n\n\nNoSSR#\n\nUsed to skip the ssr for some components. For example:\n\n\n\n\nOverview#\n\nOverview component, look the effect in this website\n\n\n\n\nPackageManagerTabs#\n\nThe PackageManagerTabs component is used to display commands for different\npackage managers in the documentation. The usage is as follows:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\nWhen command is set to a string, it will default to displaying three tabs: npm,\nyarn, pnpm and bun, and the component will automatically add the corresponding\npackage manager command before the command. If you need to display additional\ntabs, you can achieve this through additionalTabs.\n\nTIP\n\nIn the install command, special processing has been done for yarn and bun. If\nyour command is install some-packages, the install will be automatically\nreplaced with add in the yarn/bun tab.\n\n\nPrevNextPage#\n\nThe PrevNextPage component is used to display the previous and next pages of the\ncurrent page. For example:\n\n\n\nThe types of props included are as follows:\n\n\n\n\nSourceCode#\n\nThe SourceCode component is used to jump to the source code. For example:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\n\nSteps#\n\nThe Steps component is used to turn your content into a visual representation of\nsteps.\n\n\n\nThe effect is as follows:\n\n\nTab/Tabs#\n\nYou can directly use the Tab/Tabs component in the document to achieve the\neffect of tab switching. For example:\n\n\n\nNote\n\nIn order to make it easier for you to use these components, the rspress/theme\npackage has been aliased inside the framework, so you can directly use @theme to\nimport these components.\n\nThe props type of the Tabs component is as follows:\n\n\n\ndefaultValue is used to set the tab item selected by default. This value will be\ncompared with the value field of the Tab component props, and if they are equal,\nthe tab will be selected.\n\ngroupId is used to sync the selected tab item between multiple Tabs\ncomponents.The groups with the same groupId will be synchronized.\n\ntabPosition is used to set the position of the tab list, it has two values: left\nand center, the default is left.\n\nThe props types of the Tab component are as follows:\n\n\n\nThe value field is used to identify the current tab, if not passed, the default\nlabel will be used.\n\n\nTable of Contents#\n\nRender TOC of current page\n\n","routePath":"/api/client-api/api-components","lang":"en","toc":[{"text":"Badge","id":"badge","depth":2,"charIndex":3},{"text":"Helmet","id":"helmet","depth":2,"charIndex":150},{"text":"HomeFeature","id":"homefeature","depth":2,"charIndex":301},{"text":"HomeHero","id":"homehero","depth":2,"charIndex":384},{"text":"LastUpdated","id":"lastupdated","depth":2,"charIndex":428},{"text":"NoSSR","id":"nossr","depth":2,"charIndex":687},{"text":"Overview","id":"overview","depth":2,"charIndex":754},{"text":"PackageManagerTabs","id":"packagemanagertabs","depth":2,"charIndex":821},{"text":"PrevNextPage","id":"prevnextpage","depth":2,"charIndex":1544},{"text":"SourceCode","id":"sourcecode","depth":2,"charIndex":1718},{"text":"Steps","id":"steps","depth":2,"charIndex":1883},{"text":"Tab/Tabs","id":"tabtabs","depth":2,"charIndex":2010},{"text":"Table of Contents","id":"table-of-contents","depth":2,"charIndex":2980}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Runtime API","content":"#\n\nRspress exposes some runtime APIs, which is convenient for you to do some custom\nlogic.\n\n\nusePageData#\n\nGet the data of the current page, and the return value is an object, which\ncontains all the data of the current page.\n\n\n\n\nuseLang#\n\nGet the current language, the return value is a string, which is the current\nlanguage.\n\n\n\n\nuseVersion#\n\nGet the current version, the return value is a string, which is the current\nversion.\n\n\n\n\nuseDark#\n\nWhether it is dark mode currently, the return value is a boolean value.\n\n\n\n\nuseI18n#\n\nThe framework provides useI18n this hook to get the internationalized text, the\nusage is as follows:\n\n\n\nFor better type hinting, you can configure paths in tsconfig.json:\n\n\n\nThen use it like this in the component:\n\n\n\nThis way you get type hints for all literal keys defined in i18n.json.\n\n\nRouter Hook#\n\nThe framework internally uses and re-exports all APIs of react-router-dom, you\ncan use it like this:\n\n","routePath":"/api/client-api/api-runtime","lang":"en","toc":[{"text":"usePageData","id":"usepagedata","depth":2,"charIndex":92},{"text":"useLang","id":"uselang","depth":2,"charIndex":228},{"text":"useVersion","id":"useversion","depth":2,"charIndex":329},{"text":"useDark","id":"usedark","depth":2,"charIndex":431},{"text":"useI18n","id":"usei18n","depth":2,"charIndex":517},{"text":"Router Hook","id":"router-hook","depth":2,"charIndex":817}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Commands","content":"#\n\nThrough this chapter, you can learn about the built-in commands of Rspress and\nhow to use them.\n\n\nrspress dev#\n\nThe rspress dev command is used to start a local development server, providing a\ndevelopment environment for document preview and debugging.\n\n\n\n\nrspress build#\n\nThe rspress build command is used to build documentation site for production.\n\n\n\n\nrspress preview#\n\nThe rspress preview command is used to preview the output files of the rspress\nbuild command locally.\n\n\n\n\nrspress update#\n\nrspress update command is used to update the relevant package about rspress to\nlatest version.\n\n","routePath":"/api/commands","lang":"en","toc":[{"text":"rspress dev","id":"rspress-dev","depth":2,"charIndex":100},{"text":"rspress build","id":"rspress-build","depth":2,"charIndex":259},{"text":"rspress preview","id":"rspress-preview","depth":2,"charIndex":357},{"text":"rspress update","id":"rspress-update","depth":2,"charIndex":481}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Basic Config","content":"#\n\n\nroot#\n\n * Type: string\n * Default: docs\n\nSpecifies the document root directory. For example:\n\n\n\nThis config supports both relative and absolute paths, with relative paths being\nrelative to the current working directory(cwd).\n\nOf course, in addition to specifying the document root directory through the\nconfig file, you can also specify it through command line parameters, such as:\n\n\n\n\nbase#\n\n * Type: string\n * Default: /\n\nDeployment base path. For example, if you plan to deploy your site to\nhttps://foo.github.io/bar/, then you should set base to \"/bar/\":\n\n\n\n\ntitle#\n\n * Type: string\n * Default: \"Island\"\n\nSite title. This parameter will be used as the title of the HTML page. For\nexample:\n\n\n\n\ndescription#\n\n * Type: string\n * Default: \"\"\n\nSite description. This will be used as the description of the HTML page. For\nexample:\n\n\n\n\nicon#\n\n * Type: string\n * Default: \"\"\n\nSite icon. This path will be used as the icon path for the HTML page. For\nexample:\n\n\n\nThe framework will find your icon in the public directory, of course you can\nalso set it to a CDN address.\n\n\nlogo#\n\n * Type: string | { dark: string; light: string }\n * Default: \"\"\n\nSite logo. This path will be used as the logo path in the upper left corner of\nthe navbar. For example:\n\n\n\nThe framework will find your icon in the public directory, you can also set it\nto a CDN address.\n\nOf course you can set different logos for dark/light mode:\n\n\n\n\nlogoText#\n\n * Type: string\n * Default: \"\"\n\nSite logo Text. This text will be used as the logo text in the upper left corner\nof the navbar. For example:\n\n\n\n\noutDir#\n\n * Type: string\n * Default: doc_build\n\nCustom output directory for built sites. for example:\n\n\n\n\nlocales#\n\n * Type: Locale[]\n\n\n\nI18n config of the site. for example:\n\n\n\n\nmediumZoom#\n\n * Type: boolean | { selector?: string }\n * Default: true\n\nWhether to enable the image zoom function. It is enabled by default, you can\ndisable it by setting mediumZoom to false.\n\n> The bottom layer is implemented using the medium-zoom library.\n\nExample usage:\n\n\n\n\nsearch#\n\n * Type: { searchHooks: string }\n\nYou can add search runtime hooks logic through the searchHooks parameter, for\nexample:\n\n\n\nIn searchHooks.ts, you need to export the onSearch function, which will be\ncalled every time a search is performed. The input parameter is the search\nkeyword, and you can customize the search interception logic here, for example:\n\n\n\n\nglobalUIComponents#\n\n * Type: (string | [string, object])[]\n * Default: []\n\nYou can register global UI components through the globalUIComponents parameter,\nfor example:\n\n\n\nThe item of globalUIComponents can be a string, which is the path of the\ncomponent file, or an array, the first item is the path of the component file,\nand the second item is the component props, for example:\n\n\n\nWhen you register global components, the framework will automatically render\nthese React components in the theme without manually importing and using them.\n\nThrough global components, you can complete many custom functions, such as:\n\n\n\nIn this way, the content of the component will be rendered in the theme page,\nsuch as adding BackToTop button.\n\nIn the meanwhile, you can also use the global component to register some side\neffects, such as:\n\n\n\nThis way, side effects of components are executed in the theme page. For\nexample, some of the following scenarios require side effects:\n\n * Redirect for certain page routes.\n\n * Bind click event on the img tag of the page to implement the image zoom\n   function.\n\n * When the route changes, the PV data of different pages are reported.\n\n * ......\n\n\nmultiVersion#\n\n * Type: { default: string; versions: string[] }\n\nYou can enable multi-version support through the multiVersion parameter, for\nexample:\n\n\n\nThe default parameter is the default version, and the versions parameter is the\nversion list.\n\n\nroute#\n\n * Type: Object\n\nCustom route config.\n\n\nroute.include#\n\n * Type: string[]\n * Default: []\n\nAdd some extra files in the route. By default, only the files in the document\nroot directory will be included in the route. If you want to add some extra\nfiles to the route, you can use this option. For example:\n\n\n\n> Note: The strings in the array support glob patterns.\n\n\nroute.exclude#\n\n * Type: string[]\n * Default: []\n\nExclude some files from the route. For example:\n\n\n\n> Note: The strings in the array support glob patterns.\n\n\nroute.extensions#\n\n * Type: string[]\n * Default: []\n\nThe extensions of the files that will be included in the route. By default,\nRspress will include all 'js', 'jsx', 'ts', 'tsx', 'md', 'mdx' files in the\nroute. If you want to customize the extensions, you can use this option. For\nexample:\n\n\n\n\nroute.cleanUrls#\n\n * Type: Boolean\n * Default: false\n\nGenerate url without suffix when cleanUrls is true for shorter url link.\n\n\n\n\nssg#\n\n * Type: boolean\n * Default: true\n\nDetermines whether to enable Static Site Generation. It is enabled by default,\nbut you can disable it by setting ssg to false.\n\n","routePath":"/api/config/config-basic","lang":"en","toc":[{"text":"root","id":"root","depth":2,"charIndex":3},{"text":"base","id":"base","depth":2,"charIndex":389},{"text":"title","id":"title","depth":2,"charIndex":566},{"text":"description","id":"description","depth":2,"charIndex":700},{"text":"icon","id":"icon","depth":2,"charIndex":836},{"text":"logo","id":"logo-1","depth":2,"charIndex":-1},{"text":"logoText","id":"logotext","depth":2,"charIndex":1411},{"text":"outDir","id":"outdir","depth":2,"charIndex":1567},{"text":"locales","id":"locales","depth":2,"charIndex":1673},{"text":"mediumZoom","id":"mediumzoom","depth":2,"charIndex":1746},{"text":"search","id":"search","depth":2,"charIndex":2024},{"text":"globalUIComponents","id":"globaluicomponents","depth":2,"charIndex":2391},{"text":"multiVersion","id":"multiversion","depth":2,"charIndex":3571},{"text":"route","id":"route","depth":2,"charIndex":3821},{"text":"route.include","id":"routeinclude","depth":3,"charIndex":3869},{"text":"route.exclude","id":"routeexclude","depth":3,"charIndex":4192},{"text":"route.extensions","id":"routeextensions","depth":3,"charIndex":4351},{"text":"route.cleanUrls","id":"routecleanurls","depth":3,"charIndex":4646},{"text":"ssg","id":"ssg","depth":2,"charIndex":4777}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Build Config","content":"#\n\n\nbuilderConfig#\n\n * Type: Object\n\nUsed to customize the configurations of Rsbuild. For complete configurations,\nplease refer to Rsbuild - Config.\n\nFor example, change the output directory to doc_dist:\n\n\n\n\nbuilderPlugins#\n\n * Type: RsbuildPlugin[]\n\nUsed to customize the plugins of Rsbuild. For example:\n\n\n\n\nDefault Config#\n\nIf you need to see the default builderConfig, you can add the DEBUG=rsbuild\nparameter when running the rspress dev or rspress build command:\n\n\n\nAfter execution, the rsbuild.config.js file is created in the doc_build\ndirectory, which contains the complete builderConfig.\n\n> Please refer to Rsbuild - Debug Mode for more information on how to debug the\n> Rsbuild.\n\n\nmarkdown#\n\n * Type: Object\n\nConfigure MDX-related compilation abilities.\n\n\nmarkdown.remarkPlugins#\n\n * Type: Array\n * Default: []\n\nConfigure the remark plugins. for example:\n\n\n\n\nmarkdown.rehypePlugins#\n\n * Type: Array\n\nConfigure the rehype plugin. for example:\n\n\n\n\nmarkdown.checkDeadLinks#\n\n * Type: boolean\n * Default: false\n\nWhether to check for dead links. for example:\n\n\n\nAfter enabling this config, the framework will check the links in the document\nbased on the conventional routing table. If there is an unreachable link, the\nbuild will throw an error and exit.\n\n\nmarkdown.mdxRs#\n\n * Type: boolean | { include: (filepath: string) => boolean }\n\n * Default: true\n\nWhether to use the Rust version of the MDX compiler. For example:\n\n\n\nYou can also provide a function to determine which files use the Rust version of\nMDX compiler. For example:\n\n\n\nNOTICE\n\nThe bottom layer of mdxRs is based on the @rspress/mdx-rs-binding library\ndeveloped by Rspress. The performance is 10+ times higher than the JS version of\nthe MDX compiler, but the JS version of the plugin is not yet supported.\n\n\nmarkdown.showLineNumbers#\n\n * Type: boolean\n\nWhether to display the line number of the code block. Defaults to false.\n\n\nmarkdown.defaultWrapCode#\n\n * Type: boolean\n\nWhether to enable long code line wrapping display by default. Defaults to false.\n\n\nmarkdown.globalComponents#\n\n * Type: string[]\n\nRegister component to the global scope, which will make it automatically\navailable in every MDX file, without any import statements.For example:\n\n\n\nThen you can use the Alert component in any MDX file:\n\n\n\nDanger\n\nPlease set markdown.mdxRs to false when configuring globalComponents, otherwise\nthe global components will not take effect.\n\n\nmarkdown.highlightLanguages#\n\n * Type: (string | [string, string])[]\n\nRegister the languages that need to be highlighted. The default supported\nlanguages include js, jsx, ts, tsx, json, css, scss, less, xml, diff, yaml, md,\nmdx, bash. You can extend based on these languages. For example:\n\n\n\nEach language config supports both string and [string, string] formats. In the\narray format, the former is the alias of the language, and the latter is the\nfull name of the language. You can go to the file list to view all supported\nlanguage full names.","routePath":"/api/config/config-build","lang":"en","toc":[{"text":"builderConfig","id":"builderconfig","depth":2,"charIndex":3},{"text":"builderPlugins","id":"builderplugins","depth":2,"charIndex":207},{"text":"Default Config","id":"default-config","depth":3,"charIndex":309},{"text":"markdown","id":"markdown","depth":2,"charIndex":690},{"text":"markdown.remarkPlugins","id":"markdownremarkplugins","depth":3,"charIndex":765},{"text":"markdown.rehypePlugins","id":"markdownrehypeplugins","depth":3,"charIndex":868},{"text":"markdown.checkDeadLinks","id":"markdowncheckdeadlinks","depth":3,"charIndex":955},{"text":"markdown.mdxRs","id":"markdownmdxrs","depth":3,"charIndex":1261},{"text":"markdown.showLineNumbers","id":"markdownshowlinenumbers","depth":3,"charIndex":1777},{"text":"markdown.defaultWrapCode","id":"markdowndefaultwrapcode","depth":3,"charIndex":1897},{"text":"markdown.globalComponents","id":"markdownglobalcomponents","depth":3,"charIndex":2025},{"text":"markdown.highlightLanguages","id":"markdownhighlightlanguages","depth":3,"charIndex":2411}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Front Matter Config","content":"#\n\n\ntitle#\n\n * Type: string\n\nThe title of the page. By default, the page's h1 heading will be used as the\ntitle of the HTML document. But if you want to use a different title, you can\nuse Front Matter to specify the title of the page. For example:\n\n\n\n\ndescription#\n\n * Type: string\n\nA custom description for the page. For example:\n\n\n\n\npageType#\n\n * Type: 'home' | 'doc' | 'custom' | 'blank' | '404'\n * Default: 'doc'\n\nThe type of the page. By default, the page type is doc. But if you want to use a\ndifferent page type, you can use the Front Matter field pageType to specify the\npage type. E.g:\n\n\n\nThe meaning of each pageType config is as follows:\n\n\nhero#\n\n * Type: Object\n\nThe hero config for the home page. It has the following types:\n\n\n\nFor example, you can use the following Front Matter to specify a page's hero\nconfig:\n\n\n\nOr you can use HTML to specify the hero config for the page:\n\n\n\n\nfeatures#\n\n * Type: Array\n * Default: []\n\nfeatures config of the home page. It has the following types:\n\n\n\nFor example, you could use the following to specify the features configuration\nfor the home page:\n\n\n\n\nsidebar#\n\nWhether to show the sidebar on the left. By default, the doc page will display\nthe sidebar on the left. If you want to hide the sidebar on the left, you can\nuse the following Front Matter config:\n\n\n\n\noutline#\n\nWhether to display the outline column on the right. By default, the doc page\ndisplays the outline column on the right. You can hide the outline column with\nthe following config:\n\n\n\n\nfooter#\n\nWhether to display the components at the bottom of the document (such as\nprevious/next page). By default, the doc page will display the footer at the\nbottom. You can hide the footer with the following config:\n\n\n\n\nnavbar#\n\nWhether to hide the top navigation bar. You can hide the top nav bar with the\nfollowing config:\n\n","routePath":"/api/config/config-frontmatter","lang":"en","toc":[{"text":"title","id":"title","depth":2,"charIndex":3},{"text":"description","id":"description","depth":2,"charIndex":251},{"text":"pageType","id":"pagetype","depth":2,"charIndex":334},{"text":"hero","id":"hero","depth":2,"charIndex":650},{"text":"features","id":"features","depth":2,"charIndex":893},{"text":"sidebar","id":"sidebar","depth":2,"charIndex":1102},{"text":"outline","id":"outline","depth":2,"charIndex":1312},{"text":"footer","id":"footer","depth":2,"charIndex":1504},{"text":"navbar","id":"navbar","depth":2,"charIndex":1726}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"Theme Config","content":"#\n\nTheme config is located under themeConfig in the doc param. For example:\n\n\n\n\nnav#\n\n * Type: Array\n * Default: []\n\nThe nav configuration is an array of NavItem with the following types:\n\n\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted. By default, activeMatch is\nthe link of the nav item.\n\nFor example:\n\n\n\nOf course, multi-level menus can also be configured in the nav array with the\nfollowing types:\n\n\n\nFor example the following configuration:\n\n\n\n\nsidebar#\n\n * Type: Object\n\nThe sidebar of the website. The config is an object with the following types:\n\n\n\nFor example:\n\n\n\n\nfooter#\n\n * Type: Object\n * Default: {}\n\nThe footer of the home page.\n\nThe footer config is an object of Footer, which has the following types:\n\n\n\nFor example:\n\n\n\n\noutlineTitle#\n\n * Type: string\n * Default: 'ON THIS PAGE'\n\nConfigure the title of the outline in the outline panel.\n\nFor example:\n\n\n\n\nlastUpdated#\n\n * Type: boolean\n * Default: false\n\nWhether to display the last update time, it is not displayed by default.\n\nFor example:\n\n\n\n\nlastUpdatedText#\n\n * Type: string\n * Default: Last Updated\n\nThe text of the last update time.\n\nFor example:\n\n\n\n\nprevPageText#\n\n * Type: string\n * Default: Previous Page\n\nThe text of the previous page. for example:\n\n\n\n\nsearchPlaceholderText#\n\n * Type: string\n * Default: Search Docs\n\nThe placeholder text of the search box. for example:\n\n\n\n\nsocialLinks#\n\n * Type: Array\n * Default: []\n\nYou can add related links through the following config, such as github links,\ntwitter links, etc. Related links support three modes: link mode text mode image\nmode, for example:\n\n\n\n * When in link mode, click the icon to jump to the link.\n * When in text mode, when the mouse moves over the icon, a pop-up box will be\n   displayed, and the content of the pop-up box is the entered text\n * When in the img mode, moving the mouse over the icon will display a bullet\n   box, and the content of the bullet box is the specified picture. It should be\n   noted that the picture needs to be placed in the public directory.\n\nRelated links support the following types of images, which can be selected\nthrough the icon attribute:\n\n\n\nIf you need to customize the icon, you can pass in an object with svg attribute,\nand the value of svg is the content of the custom icon, for example:\n\n\n\n\nnextPageText#\n\n * Type: string\n * Default: Next Page\n\nText for the next page. for example:\n\n\n\n\nlocales#\n\n * Type: Array\n * Default: undefined\n\nI18n config. This config is an array, and every item of it is LocaleConfig, and\nthe types are as follows:\n\n\n\nLocaleConfig contains many of the same configuration options as the theme\nconfig, but the former will have a higher priority.\n\n\ndarkMode#\n\n * Type: boolean\n * Default: true\n\nWhether a Dark/Light mode toggle button appears. for example:\n\n\n\nYou can also specify the default theme mode through inject global variable into\nhtml template, for example:\n\n\n\n\nhideNavbar#\n\n * Type: \"always\" | \"auto\" | \"never\"\n * Default: never\n\nControl the behavior of the hidden navigation bar. By default, the navigation\nbar will always display. You can set it to auto to automatically hide when the\npage scrolls down, or set it to always to hidden it all the time.\n\nFor example:\n\n\n\n\nenableContentAnimation#\n\n * Type: boolean\n * Default: false\n\nWhether there is an animation effect when switching between pages. For example:\n\n> The animation is not configurable for now.\n\n\n\n\nsearch#\n\n * Type: boolean\n * Default: true\n\nWhether to display the search box. for example:\n\n\n\n\nsourceCodeText#\n\n * Type: string\n * Default: Source\n\nThe text of the source code button. for example:\n\n\n\n\nenableScrollToTop#\n\n * Type: boolean\n * Default: false\n\nEnable scroll to top button on documentation. For example:\n\n","routePath":"/api/config/config-theme","lang":"en","toc":[{"text":"nav","id":"nav","depth":2,"charIndex":79},{"text":"sidebar","id":"sidebar","depth":2,"charIndex":530},{"text":"footer","id":"footer","depth":2,"charIndex":655},{"text":"outlineTitle","id":"outlinetitle","depth":2,"charIndex":819},{"text":"lastUpdated","id":"lastupdated","depth":2,"charIndex":953},{"text":"lastUpdatedText","id":"lastupdatedtext","depth":2,"charIndex":1094},{"text":"prevPageText","id":"prevpagetext","depth":2,"charIndex":1206},{"text":"searchPlaceholderText","id":"searchplaceholdertext","depth":2,"charIndex":1312},{"text":"socialLinks","id":"sociallinks","depth":2,"charIndex":1434},{"text":"nextPageText","id":"nextpagetext","depth":2,"charIndex":2355},{"text":"locales","id":"locales","depth":2,"charIndex":2450},{"text":"darkMode","id":"darkmode","depth":2,"charIndex":2735},{"text":"hideNavbar","id":"hidenavbar","depth":2,"charIndex":2958},{"text":"enableContentAnimation","id":"enablecontentanimation","depth":2,"charIndex":3268},{"text":"search","id":"search","depth":2,"charIndex":3459},{"text":"sourceCodeText","id":"sourcecodetext","depth":2,"charIndex":3555},{"text":"enableScrollToTop","id":"enablescrolltotop","depth":2,"charIndex":3661}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"","content":"","routePath":"/api/","lang":"en","toc":[],"domain":"","frontmatter":{"overview":true},"version":""},{"id":9,"title":"Customize Search Functions1","content":"#\n\nIn some scenarios, we need to customize the search function, such as:\n\n * Processing keywords in the search process, such as removing sensitive words.\n * Filtering the default full-text search results.\n * Reporting the search keywords.\n * Customizing the search data source, such as searching from the database.\n * Rendering the custom search data source.\n * ......\n\nFaced with these flexible custom requirements, we provide corresponding\ninterfaces to extend the search components of the default theme, making it easy\nfor you to customize the search function.\n\n\nUnderstanding searchHooks#\n\nIn the Rspress config, we provide a search.searchHooks config item for\nconfiguring the hook functions of the search components, as follows:\n\n\n\nThe value of the search.searchHooks config item is a file path. This file will\nexport the corresponding hook logic, such as onSearch, so that you can customize\nthe capabilities of the search at run time. We can call this file a searchHooks\nmodule.\n\n\nHook Functions in searchHooks#\n\nNext, let us introduce the hook functions in searchHooks, namely beforeSearch,\nonSearch, afterRender and render.\n\nTIP\n\nIn the searchHooks module, you only need to export the hook functions you need,\ninstead of necessarily exporting all the hook functions.\n\n\nbeforeSearch#\n\nThe beforeSearch hook function will be executed before the search starts, you\ncan use it to process the search keywords, such as removing sensitive words, or\nreporting the search keywords.\n\n> This hook supports asynchronous operations.\n\nHere is an example of usage:\n\n\n\n\nonSearch#\n\nThe onSearch hook function will be executed after the default full-text search\nlogic is finished. You can use this hook function to filter or report the search\nresults, or you can add a custom search data source in this hook function.\n\n> This hook supports asynchronous operations.\n\nHere is an example of how to use it:\n\n\n\nNote that the return value of the onSearch hook function is an array, each item\nin the array is a search source result, and each item has the following\nstructure:\n\n\n\nThe result is the search result, you can customize its internal structure. The\nrenderType is the type of the search result, which can be RenderType.Default or\nRenderType.Custom. If it is RenderType.Default, the default search result\nrendering logic will be used; if it is RenderType.Custom, the render function\nwill be used to render the search result.\n\n\nafterSearch#\n\nThe afterSearch hook function will be executed after the search result is\nrendered. You can get the final search keywords and search results in this hook.\n\n> This hook supports asynchronous operations.\n\nHere is an example of usage:\n\n\n\n\nrender#\n\nThe render function will render the custom search source data in your onSearch\nhook. Therefore, it generally needs to be used together with onSearch. Here's\nhow to use it:\n\n\n\nThe result is as follows:\n\n","routePath":"/guide/advanced/custom-search","lang":"en","toc":[{"text":"Understanding `searchHooks`","id":"understanding-searchhooks","depth":2,"charIndex":-1},{"text":"Hook Functions in searchHooks","id":"hook-functions-in-searchhooks","depth":2,"charIndex":986},{"text":"beforeSearch","id":"beforesearch","depth":3,"charIndex":1276},{"text":"onSearch","id":"onsearch","depth":3,"charIndex":1561},{"text":"afterSearch","id":"aftersearch","depth":3,"charIndex":2416},{"text":"render","id":"render","depth":3,"charIndex":2666}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Custom Theme","content":"#\n\nThis article will tell you how to develop custom theme.\n\n\nExtensions based on the default theme#\n\nIn most cases, you don't want to develop a theme from scratch, but want to\nextend it based on the default theme. At this time, you can refer to the\nfollowing methods for theme development.\n\nTIP\n\nIf you want to develop a custom theme from scratch, you can go to Redevelop a\ncustom theme.\n\n\n1. Basic structure#\n\nBy default, you need to create a theme directory under the project root\ndirectory, and then create an index.ts or index.tsx file under the theme\ndirectory, which is used to export the theme content.\n\n\n\nYou can write the theme/index.tsx file as follows:\n\n\n\nOn the one hand, you need to export a theme configuration object through export\ndefault, on the other hand, you need to export all named exported content\nthrough export * from 'rspress/theme' so as to ensure your theme works fine.\n\n\n2. Use slot#\n\nIt is worth noting that the Layout component has designed a series of props to\nsupport slot elements. You can use these props to extend the layout of the\ndefault theme. For example, change the above Layout component to the following\nform:\n\n\n\n\n3. Custom Home page and 404 page#\n\nIn addition to the slot method, if you want to extend the default theme\ncomponents, you can also customize the Home page components and 404 page\ncomponents, as well as other Rspress built-in components\n\n\n\nOf course, you may need to use page data during the development process, you can\nget it through Runtime API.\n\n\n4. Custom Icon#\n\nIf you want to modify the icons used in the default theme component\nindividually, just put the icons with the same name in the theme/assets\ndirectory.\n\n\n\nYou can view all the icons used in the default theme here.\n\n\nRedevelop a custom theme#\n\nIf you're developing a custom theme from scratch, you need to understand the\nbasic structure of the theme and the runtime API.\n\n\n1. Basic structure#\n\nBy default, you need to create a theme directory under the project root\ndirectory, and then create an index.ts or index.tsx file under the theme\ndirectory, which is used to export the theme content.\n\n\n\nIn the theme/index.tsx file, you need to export a Layout component, which is the\nentry component of your theme:\n\n\n\nLayout component will be used to render the layout of the entire document site,\nyou can introduce your custom components in this component, for example:\n\n\n\nSo the question is, how does the theme component get the page data and the\ncontent of the body MDX component? Next, let's take a look at the related APIs.\n\n\n2. Runtime API#\n\nusePageData#\n\nGet information about all data on the site, such as:\n\n\n\nuseLang#\n\nGet the current language information, such as:\n\n\n\nContent#\n\nGet MDX component content, such as:\n\n\n\nRoute Hook#\n\nreact-router-dom is used inside the framework to implement routing, so you can\ndirectly use the Hook of react-router-dom, for example:\n\n\n\n\n3. Reusing Search Functionality#\n\nThe default theme comes with built-in search functionality, which we can break\ndown into two components:\n\n 1. The search box, i.e., the entry point to invoke the search.\n 2. The search panel that pops up after clicking on the search box.\n\nFull Reuse#\n\nIf you want to fully reuse the search functionality, you can directly import the\nSearch component, like so:\n\n\n\nReusing the Search Panel#\n\nIf you only want to reuse the search panel and customize the search box part,\nthen you need to import the SearchPanel component in your theme component, like\nso:\n\n\n\nIn this case, you need to maintain the focused state and setFocused method\nyourself, and pass them as props to the SearchPanel component for controlling\nthe display and hiding of the search panel.\n\nReuse Default Full Text Search Logic#\n\nIf you want to reuse the default full text search logic, you can use the\nuseFullTextSearch Hook, for example:\n\n\n\nHere, initialized indicates whether the search is initialized, the search method\nis used to search for keywords, returning a Promise, the result of the Promise\nis the result of the default full text search.\n\nIt should be noted that the useFullTextSearch Hook will automatically load the\nsearch index during initialization, so you need to first determine the\ninitialized status, ensure that initialization is complete, and then call the\nsearch method.\n\nThe type definition of the search method is as follows:\n\n\n\nThe limit represents the maximum number of search results, default is 7, which\nmeans by default it returns a maximum of seven article results.","routePath":"/guide/advanced/custom-theme","lang":"en","toc":[{"text":"Extensions based on the default theme","id":"extensions-based-on-the-default-theme","depth":2,"charIndex":60},{"text":"1. Basic structure","id":"1-basic-structure","depth":3,"charIndex":389},{"text":"2. Use slot","id":"2-use-slot","depth":3,"charIndex":899},{"text":"3. Custom Home page and 404 page","id":"3-custom-home-page-and-404-page","depth":3,"charIndex":1156},{"text":"4. Custom Icon","id":"4-custom-icon","depth":3,"charIndex":1507},{"text":"Redevelop a custom theme","id":"redevelop-a-custom-theme","depth":2,"charIndex":1739},{"text":"1. Basic structure","id":"1-basic-structure-1","depth":3,"charIndex":1895},{"text":"2. Runtime API","id":"2-runtime-api","depth":3,"charIndex":2546},{"text":"usePageData","id":"usepagedata","depth":4,"charIndex":2563},{"text":"useLang","id":"uselang","depth":4,"charIndex":2633},{"text":"Content","id":"content","depth":4,"charIndex":2693},{"text":"Route Hook","id":"route-hook","depth":4,"charIndex":2742},{"text":"3. Reusing Search Functionality","id":"3-reusing-search-functionality","depth":3,"charIndex":2894},{"text":"Full Reuse","id":"full-reuse","depth":4,"charIndex":3167},{"text":"Reusing the Search Panel","id":"reusing-the-search-panel","depth":4,"charIndex":3291},{"text":"Reuse Default Full Text Search Logic","id":"reuse-default-full-text-search-logic","depth":4,"charIndex":3681}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"Build Extension","content":"#\n\n\nRsbuild#\n\nRspress builds documents based on Rsbuild.\n\nRsbuild provides flexible build configurations, you can use builderConfig to\ncustomize these configurations. For example, change the output directory to\ndoc_dist:\n\n\n\nTIP\n\nYou can learn more configurations through the Rsbuild - Config documentation.\n\nNote that Rspress only supports Rspack bundler, so some configurations related\nto webpack will not work, such as tools.webpack. Of course, you can use the\ntools.rspack to customize the Rspack config.\n\n\nMDX Compilation#\n\nThe compilation of MDX in the framework is based on unified, and you can add\nrelated compilation plugins through markdown configuration. for example :\n\n\n\nWARNING\n\nOnly the JS version of the MDX compiler supports compilation plugins.","routePath":"/guide/advanced/extend-build","lang":"en","toc":[{"text":"Rsbuild","id":"rsbuild","depth":2,"charIndex":3},{"text":"MDX Compilation","id":"mdx-compilation","depth":2,"charIndex":509}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"Auto Nav/Sidebar","content":"#\n\nIn Rspress, in addition to declaring nav and sidebar through themeConfig in the\nconfig file, you can also automatically generate the nav bar and sidebar by\ndeclaring the _meta.json description file. We recommend the latter because it\ncan make the config file more concise and clear.\n\nTIP\n\nAutomated navbar/sidebar will only work if there are no nav and sidebar\nconfigurations in the config file rspress.config.ts.\n\n\nBasic Concept#\n\nFirst, _meta.json can be divided into two categories: navbar level and sidebar\nlevel. The difference between the two is that the navigation-level _meta.json\nlives in the document root, while the sidebar-level _meta.json lives in a\nsubdirectory of the document root. for example:\n\n\n\nIf your document supports i18n, then _meta.json at the navigation bar level will\nbe placed in the corresponding language directory, for example:\n\n\n\n\nNavbar Level Config#\n\nIn the case of the navigation bar level, you can fill in an array in _meta.json,\nand its type is exactly the same as the nav config of the default theme. For\ndetails, please refer to nav config. for example:\n\n\n\n\nSidebar Level Config#\n\nIn the case of the sidebar level, you can fill in _meta.json an array with each\nitem of the following type:\n\n\n\n\nstring#\n\nWhen the type is string, it means that the item is a file, and the file name is\nthe string, for example:\n\n\n\nThe file name may or may not have a suffix, for example introduction will be\nparsed as introduction.mdx.\n\n\nobject#\n\nWhen the type is an object, you can describe it as a file, a directory or a\ncustom link.\n\nIn the case of describing file, the types are as follows:\n\n\n\nAmong them, name means the file name, with/without suffix is supported, label\nmeans the display name of the file in the sidebar.label is an optional value, if\nit is not filled, it will automatically take the h1 title in the document. For\nexample:\n\n\n\nIn the case of describing directories, the types are as follows:\n\n\n\nAmong them, name indicates the directory name, label indicates the display name\nof the directory in the sidebar, collapsible indicates whether the directory can\nbe collapsed, and collapsed indicates whether the directory is collapsed by\ndefault, for example:\n\n\n\nIn the case of describing divider, the types are as follows:\n\n\n\nWhen dashed is set to true, it indicates that the divider line is dashed.\nOtherwise, it is solid.\n\nTIP\n\nIf you want to display a document when clicking on the sidebar directory, you\ncan create an md(x) file with the same name at the same level as the current\ndirectory, for example:\n\n\n\nIn this way, when you click on the Advanced directory, the content of the\nadvanced.mdx file will be displayed.\n\nIn the case of describing section header, the type is as follows:\n\n\n\nHere, label represents the display name of this section header in the sidebar,\nfor example:\n\n\n\nThis way, you can add section headers to the sidebar, which makes it easier to\ngroup documents and directories. Generally, you can use it in conjunction with\ndivider to better distinguish different groups. For example:\n\n\n\nIn the case of describing custom link, the types are as follows:\n\n\n\nAmong them, link indicates the link address, label indicates the display name of\nthe link in the sidebar, for example:\n\n\n\nlink support external links, for example:\n\n\n\n\nComplete Example#\n\nHere is a complete example using the three types above:\n\n\n\n\nNo Config Usage#\n\nIn some directories, you don't need to configure _meta.json and let the\nframework automatically generate the sidebar. This requires ensuring that the\ndirectory contains only documents, not subdirectories, and you have no\nrequirements for the order of documents. For example, there is now the following\ndocument structure:\n\n\n\nIn the guides directory you can configure _meta.json as follows:\n\n\n\nIn basic directory, you may not configure _meta.json, and then the framework\nwill automatically generate a sidebar for you, the default is sorted\nalphabetically according to the file name. If you want to customize the order,\nyou can prefix the file name with a number, such as:\n\n\n\n\nAdd SVG Icons Before Titles#\n\nIn addition, you can add icons before the title through the tag confing, like\nthis:\n\n\n\nThe value of tag is a svg tag string or image url, which you can configure in\nthe navbar or sidebar.","routePath":"/guide/basic/auto-nav-sidebar","lang":"en","toc":[{"text":"Basic Concept","id":"basic-concept","depth":2,"charIndex":418},{"text":"Navbar Level Config","id":"navbar-level-config","depth":2,"charIndex":865},{"text":"Sidebar Level Config","id":"sidebar-level-config","depth":2,"charIndex":1099},{"text":"string","id":"string","depth":3,"charIndex":1234},{"text":"object","id":"object","depth":3,"charIndex":1458},{"text":"Complete Example","id":"complete-example","depth":3,"charIndex":3282},{"text":"No Config Usage","id":"no-config-usage","depth":3,"charIndex":3361},{"text":"Add SVG Icons Before Titles","id":"add-svg-icons-before-titles","depth":3,"charIndex":4054}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Conventional Route","content":"#\n\n\nWhat is it?#\n\nRspress uses file system routing, and the file path of the page is simply mapped\nto the routing path, which makes the routing of the entire project very\nintuitive.\n\nFor example, if there is a file named foo.md in the docs directory, the routing\npath for that file will be /foo.\n\n\nMapping Rules#\n\nRspress automatically scans the root directory and all subdirectories, and maps\nfile paths to route paths. For example, if you have the following file\nstructure:\n\n\n\nThen bar.md will be routed to /foo/bar, and foo.md will be routed to /foo.\n\nThe specific mapping rules are as follows:\n\nFILE PATH       ROUTE PATH\nindex.md        /\n/foo.md         /foo\n/foo/bar.md     /foo/bar\n/zoo/index.md   /zoo/\n\n\nComponent Routing#\n\nIn conventional routing, in addition to .md(x) files, you can also use .tsx\nfiles as route components. By default, a component is exported in .tsx, and this\ncomponent will be automatically registered in the route. For example:\n\n\n\nOf course, if you want to customize the layout, you can add an export to declare\nthe layout type. For example:\n\n\n\nFor detailed meanings of each pageType, please refer to the API documentation.\n\n\nCustom Behavior#\n\nIf you want to customize the routing behavior, you can use the route field in\nthe configuration file. For example:\n\n\n\n\nBest Practices#\n\nWe recommend that you place documentation files in the docs directory to make\nyour project more clear. For non-documentation content, such as custom\ncomponents, util functions, etc., they can be maintained outside the docs\ndirectory. For example:\n\n","routePath":"/guide/basic/conventional-route","lang":"en","toc":[{"text":"What is it?","id":"what-is-it","depth":2,"charIndex":3},{"text":"Mapping Rules","id":"mapping-rules","depth":2,"charIndex":297},{"text":"Component Routing","id":"component-routing","depth":2,"charIndex":713},{"text":"Custom Behavior","id":"custom-behavior","depth":2,"charIndex":1158},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":1295}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"Customizing Page","content":"#\n\nRspress provides several ways for you to customize the content of your pages,\nincluding:\n\n * Adding custom global components.\n * Adding custom global styles.\n * Customizing page layout structure.\n\n\nCustom Global Components#\n\nIn some scenarios, you may need to add some custom global components to the\npage. The framework provides a config item globalUIComponents to achieve this\nfunction.\n\n\nHow to Use#\n\nAdd the following config in rspress.config.ts:\n\n\n\nEach item of globalUIComponents can be a string, representing the file path of\nthe component; or it can be an array, the first item is the file path of the\ncomponent, and the second item is the props object of the component, such as:\n\n\n\n\nCustom Styles#\n\nIn some scenarios, you may need to add some global styles on top of the theme\nUI. The framework provides a configuration item globalStyles to achieve this\nfunction.\n\n\nHow to Use#\n\nAdd the following configuration in rspress.config.ts:\n\n\n\nThen you can add the following code:\n\n\n\nIn this way, the framework will automatically collect all global styles and\nmerge them into the final style file.\n\nHere are some commonly used global styles:\n\n\n\n> If you want to know more about the internal global styles, you can check\n> vars.css\n\n\nTailwind CSS#\n\nIn order to get Tailwind CSS working with Rspress, you can use the following\nsteps:\n\n 1. Install Tailwind CSS:\n\n 2. Create a postcss.config.js file containing tailwindcss plugin:\n\n\n\n 3. Create a tailwind.config.js file and make sure all the content files are\n    included via content:\n\n\n\n 4. Include the Tailwind directives in your CSS styles file from Custom Styles:\n\n\n\n> For most up to date configuration, please refer to the official Tailwind CSS\n> documentation.\n\n\nCustom Layout Structure#\n\n\nUsing pageType#\n\nRspress provides a pageType configuration for you to customize the layout\nstructure of the page.\n\nRspress's convention-based routing supports two types of routes, one is document\nrouting, that is, pages written with md(x) files, and the other is component\nrouting, that is, pages written with .jsx/.tsx files.\n\nFor the former, you can add the pageType field in the frontmatter to specify the\nlayout structure of the page, such as:\n\n\n\nFor the latter, you can add the following export to specify pageType:\n\n\n\npageType can be configured as the following values:\n\n\nUsing Fine-grained Switches#\n\nIn addition to the pageType page layout level configuration, Rspress also\nprovides more fine-grained switches. You can configure other fields in the\nfrontmatter. These fields and their meanings are as follows:\n\n * navbar: Whether to display the top navigation bar. When you want to hide the\n   top navigation bar, you can set it to false.\n * sidebar: Whether to display the sidebar. When you want to hide the sidebar,\n   you can set it to false.\n * outline: Whether to display the outline column. When you want to hide the\n   outline column, you can set it to false.\n * footer: Whether to display the footer. When you want to hide the footer, you\n   can set it to false.\n\nExample:\n\n\n\n\nUsing URL Parameters as Switches#\n\nIn addition, you can use URL parameters to control the layout structure of the\npage at runtime, such as:\n\n\n\nWith URL parameters, you can quickly adjust the layout structure of the page\nwithout modifying the source code. These parameters specifically include:\n\n * navbar: Whether to display the navigation bar. When you want to hide the top\n   navigation bar, you can set it to 0.\n * sidebar: Whether to display the sidebar. When you want to hide the sidebar,\n   you can set it to 0.\n * outline: Whether to display the outline column. When you want to hide the\n   outline column, you can set it to 0.\n * footer: Whether to display the footer. When you want to hide the footer, you\n   can set it to 0.\n * globalUIComponents: Whether to display the global components. When you want\n   to hide the global components, you can set it to 0.","routePath":"/guide/basic/custom-page","lang":"en","toc":[{"text":"Custom Global Components","id":"custom-global-components","depth":2,"charIndex":200},{"text":"How to Use","id":"how-to-use","depth":3,"charIndex":393},{"text":"Custom Styles","id":"custom-styles","depth":2,"charIndex":694},{"text":"How to Use","id":"how-to-use-1","depth":3,"charIndex":877},{"text":"Tailwind CSS","id":"tailwind-css","depth":3,"charIndex":1236},{"text":"Custom Layout Structure","id":"custom-layout-structure","depth":2,"charIndex":1720},{"text":"Using pageType","id":"using-pagetype","depth":3,"charIndex":1747},{"text":"Using Fine-grained Switches","id":"using-fine-grained-switches","depth":3,"charIndex":2325},{"text":"Using URL Parameters as Switches","id":"using-url-parameters-as-switches","depth":3,"charIndex":3040}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"Deployment","content":"#\n\nIn this section, we will discuss the deployment of the project. We assume that\nyou have completed the development of the project and now need to deploy the\nproject online. You need to consider the following aspects:\n\n * Production build and preview of the project.\n * Static resource prefix configuration.\n * Project base path configuration.\n * Choose deployment platform for deployment.\n\n\nBuild and Preview#\n\nBefore deployment, we need to first build the project in the production\nenvironment and preview it locally to ensure that the project can run normally.\nIn Rspress projects, we can use the following scripts commands to build and\npreview:\n\n\n\nTip\n\nFor the preview command, you can specify the preview port number through the\n--port parameter, such as rspress preview --port 8080.\n\nIt is worth noting that the final output will be output to the doc_build\ndirectory under the project root directory. The content in this directory is\nwhat we need to deploy.\n\n\nStatic Resource Prefix Configuration#\n\nWe can divide the deployment output into two parts: HTML files and static\nresources. HTML files refer to the HTML files in the output directory. These\nfiles are the files we finally deploy to the server.\n\nThe so-called static resources refer to the static directory in the output\ndirectory, which contains the JavaScript, CSS, images and other static resources\nrequired by the project. When deploying, if you want to put these static\nresources on the CDN to ensure better access performance, instead of directly\nputting them on the server like HTML, then you need to configure the prefix of\nthe static resources so that the project can correctly reference these static\nresources. You can complete it through builderConfig.output.assetPrefix:\n\n\n\nIn this way, when referencing static resources in HTML, the prefix will be\nautomatically added, for example:\n\n\n\n\nProject Base Path Configuration#\n\nWhen deploying, we may need to deploy the project to a subpath. For example, if\nyou plan to deploy your site to https://foo.github.io/bar/, then you should set\nthe base parameter to \"/bar/\":\n\n\n\n\nDeployment in Platform#\n\nAfter completing the above configuration, we can deploy the output to the\nserver. You have many choices, such as GitHub Pages, Netlify, Vercel, etc. Here\nwe take GitHub Pages and Netlify as examples to explain how to deploy.\n\n\nDeploy via GitHub Actions#\n\nIf your project is hosted on GitHub, then you can deploy via GitHub Pages.\nGitHub Pages is a static website hosting service provided by GitHub, which\nallows you to directly deploy your project to GitHub without having to build\nyour own server.\n\n1. Create Workflow File#\n\nFirst, you need to create a file named .github/workflows/deploy.yml in the\nproject root directory, with the following content:\n\n\n\n2. Configure GitHub Actions#\n\nIn the Pages column of the repository Settings interface, you can choose GitHub\nActions as the deployment source.\n\n3. Push Code to Main Branch#\n\nWhen you push the code to the main branch, GitHub Actions will automatically\nexecute the deployment process. You can view the progress of the deployment in\nthe Actions column. After the deployment is complete, you can access your site\nthrough https://.github.io//.\n\n\nDeploy via Netlify#\n\nNetlify is a Web application deployment platform, which allows you to directly\ndeploy your project to Netlify without having to build your own server.\n\nBasic Configuration#\n\nDeploying a project on Netlify is very simple. You only need to import your\nGithub repository, and then configure some basic information to deploy. Just\nconfigure the following two fields:\n\n * Build command: Build command, here we fill in the build command in the\n   project, such as npm run build.\n * Publish directory: Output directory, here we fill in the output directory\n   doc_build in the project.\n\nThen click the Deploy site button to complete the deployment.\n\nConfigure Custom Domain#\n\nIf you want to bind your site to your own domain, you can configure it in the\nDomain management column of Netlify. The specific configuration method can refer\nto the Netlify official documentation.\n\n\nDeploy to Kinsta Static Site Hosting#\n\nYou can deploy your Rspress site on Kinsta.\n\n 1. Login or create an account to view your MyKinsta dashboard.\n\n 2. Authorize Kinsta with your Git provider.\n\n 3. Select Static Sites from the left sidebar and press Add sites.\n\n 4. Select the repository and branch you want to deploy.\n\n 5. During the build settings, Kinsta will automatically try to fill out the\n    Build command, Node version, and Publish directory. If it won't, fill out\n    the following:\n    \n    * Build command: npm run build\n    * Node version: 18.16.0\n    * Publish directory: doc_build\n\n 6. Click the Create site.\n\n\nDeploy to Zeabur#\n\nZeabur is a platform for deploying services instantly, which allows you to\ndirectly deploy your Rspress site without any other configurations.\n\nHow to Deploy#\n\nFirst of all, you need to create a Zeabur account. Then, follow the instructions\nto create a project and install a GitHub app to authorize Zeabur get your\nRspress repository.\n\nClick on Deploy New Service and import your Rspress repository, the deployment\nwill be started automatically and Zeabur will recognize that your site is built\nwith Rspress.\n\nThe deployment will be finished in a minute, you can also bind a free sub domain\nprovided by Zeabur or your own domain for this site.","routePath":"/guide/basic/deploy","lang":"en","toc":[{"text":"Build and Preview","id":"build-and-preview","depth":2,"charIndex":392},{"text":"Static Resource Prefix Configuration","id":"static-resource-prefix-configuration","depth":2,"charIndex":966},{"text":"Project Base Path Configuration","id":"project-base-path-configuration","depth":2,"charIndex":1863},{"text":"Deployment in Platform","id":"deployment-in-platform","depth":2,"charIndex":2092},{"text":"Deploy via GitHub Actions","id":"deploy-via-github-actions","depth":3,"charIndex":2344},{"text":"1. Create Workflow File","id":"1-create-workflow-file","depth":4,"charIndex":2617},{"text":"2. Configure GitHub Actions","id":"2-configure-github-actions","depth":4,"charIndex":2773},{"text":"3. Push Code to Main Branch","id":"3-push-code-to-main-branch","depth":4,"charIndex":2918},{"text":"Deploy via Netlify","id":"deploy-via-netlify","depth":3,"charIndex":3215},{"text":"Basic Configuration","id":"basic-configuration","depth":4,"charIndex":3388},{"text":"Configure Custom Domain","id":"configure-custom-domain","depth":4,"charIndex":3879},{"text":"Deploy to Kinsta Static Site Hosting","id":"deploy-to-kinsta-static-site-hosting","depth":3,"charIndex":4105},{"text":"Deploy to Zeabur","id":"deploy-to-zeabur","depth":3,"charIndex":4733},{"text":"How to Deploy","id":"how-to-deploy","depth":4,"charIndex":4896}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"Static Site Generation","content":"#\n\n\nIntroduction#\n\nIn the production build, Rspress will automatically generate a static site for\nyou, that is, generate the HTML content of each page. After the build is\ncompleted, the HTML will appear in the default product directory, such as:\n\n\n\nYou can deploy the contents of this product directory to any static site hosting\nservice, such as Github Pages, Netlify, Vercel, etc.\n\n\nAdvantages of SSG#\n\nThe essence of static site generation is to pre-render components at the build\nstage, render the components into HTML strings, and then write them into HTML\nfiles. This has many benefits, such as:\n\n * Faster FCP, because there is no need to wait for JS to load before rendering.\n * More conducive to SEO, because search engine spiders can directly crawl the\n   complete HTML content.\n\nConsidering the cost of static site generation, Rspress only pre-renders during\nproduction environment builds. In the development environment, it still uses the\ntraditional SPA rendering mode without pre-rendering.\n\n\nAdding Custom Site Content#\n\nThrough builderConfig.html.tags, you can customize the site HTML content, such\nas adding statistical code, adding scripts and styles, etc.\n\n\n\nFor more detailed config of builderConfig.html.tags, please refer to the\ndocumentation.\n\n\nPreview#\n\nAfter the production build is complete, you can preview the output by using the\nrspress preview command. This command will start a local static site service,\nand you can access this service in your browser to preview the output.\n\n\n\n\nDisabling SSG#\n\nIf you do not want to use Static Site Generation, you can disable it through the\nssg config.\n\n\n\nWARNING\n\nPlease be cautious when disabling SSG, as this will forfeit many of the\nadvantages of Static Site Generation mentioned above.","routePath":"/guide/basic/ssg","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Advantages of SSG","id":"advantages-of-ssg","depth":2,"charIndex":384},{"text":"Adding Custom Site Content","id":"adding-custom-site-content","depth":2,"charIndex":1006},{"text":"Preview","id":"preview","depth":2,"charIndex":1267},{"text":"Disabling SSG","id":"disabling-ssg","depth":2,"charIndex":1510}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"Static Assets","content":"#\n\n\nIntroduction#\n\nIn Rspress, you may use the following static assets:\n\n * Logo image at the top left corner of the site\n * Site favicon icon\n * Homepage logo image\n * Images, videos and other static assets used in .md(x) files\n * Other static assets\n\nNext, we will introduce how to use these static assets one by one.\n\nTip\n\nThe document root directory mentioned below refers to the directory specified by\nthe root field in rspress.config.ts:\n\n\n\n\nTop Left Corner Logo#\n\nIn Rspress, you can specify the logo image at the top left corner through the\nlogo field. For example:\n\n\n\nThe logo field supports both string and object configurations.\n\nWhen the logo is a string, there are the following config situations:\n\n * Configured as an external link, like the above example.\n * Configured as an absolute path, such as /rspress-logo.png. In this case,\n   Rspress will automatically find the rspress-logo.png image in the public\n   directory of your document root directory and display it.\n * Configured as a relative path, such as ./docs/public/rspress-logo.png. In\n   this case, Rspress will find the rspress-logo.png image based on the project\n   root directory and display it.\n\nIf your website needs to adapt to dark mode, you can also use the object\nconfiguration of the logo, such as:\n\n\n\nHere, light represents the logo address in light mode, and dark represents the\nlogo address in dark mode. Their configuration methods are consistent with the\nabove string configuration.\n\n\nFavicon#\n\nIn Rspress, you can specify the site's favicon icon through the icon field. For\nexample:\n\n\n\nThe icon field supports string config, with the following specific ways:\n\n * Configured as an external link, like the above example.\n * Configured as an absolute path, such as /favicon.ico. In this case, Rspress\n   will automatically find the favicon.ico icon in the public directory of your\n   document root directory and display it.\n * Configured as a relative path, such as ./docs/public/favicon.ico. In this\n   case, Rspress will find the favicon.ico icon based on the project root\n   directory and display it.\n\n\nHomepage Logo#\n\nIn the frontmatter configuration of the homepage, you can specify the homepage\nlogo image through the hero.image.src field. For example:\n\n\n\nHere, src is a string, supporting the following configurations:\n\n * Configured as an external link, like the above example.\n * Configured as an absolute path, such as /rspress-logo.png. In this case,\n   Rspress will automatically find the rspress-logo.png image in the public\n   directory of your document root directory and display it.\n\n\nStatic assets Used in .md(x) Files#\n\nYou can import static assets in markdown (or mdx) files. Both relative paths and\nabsolute paths are supported. For example, if there is an image in the same\ndirectory as the markdown, you can reference it like this:\n\n\n\nOf course, you can also directly use the img tag in .mdx files:\n\n\n\nRspress will automatically find the image based on the .mdx file path and image\npath, and respond to the browser.\n\nOn the other hand, you can also import static assets using absolute paths. In\nthis case, Rspress will look for assets in the public folder under the document\nroot directory.\n\nFor example, if the root directory is docs and the directory structure is as\nfollows\n\n\n\nIn the above index.mdx file, you can reference demo.png like this:\n\n\n\nOr use an absolute path to reference:\n\n\n\nA special case to note is that, when your site is configured with a base path,\nif you want to use the img tag to introduce an absolute path, you need to use\nnormalizeImagePath provided by rspress/runtime to manually add the base path to\nits src. Here is an example:\n\n\n\nNot only images, but you can also import videos, audios and other static assets\nin markdown files.\n\n\nOther Static Assets#\n\nIn some scenarios, you may need to deploy certain specific static assets, such\nas adding the deployment configuration file _headers of Netlify to specify\ncustom HTTP response headers.\n\nIn that case, you can directly put these static assets in the public directory\nof the document root directory (such as docs). During the project build process,\nRspress will automatically copy all assets in the public directory to the\nproduct directory. In this way, the assets under public can be deployed to the\nserver.","routePath":"/guide/basic/static-assets","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Top Left Corner Logo","id":"top-left-corner-logo","depth":2,"charIndex":447},{"text":"Favicon","id":"favicon","depth":2,"charIndex":1475},{"text":"Homepage Logo","id":"homepage-logo","depth":2,"charIndex":2094},{"text":"Static assets Used in .md(x) Files","id":"static-assets-used-in-mdx-files","depth":2,"charIndex":2589},{"text":"Other Static Assets","id":"other-static-assets","depth":2,"charIndex":3771}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"Use MDX","content":"#\n\nRspress supports MDX, a powerful way to develop content.\n\n\nMarkdown#\n\nMDX is a superset of Markdown, which means you can write Markdown files as\nusual. For example:\n\n\n\n\nUse Component#\n\nWhen you want to use React components in Markdown files, you should name your\nfiles with .mdx extension. For example:\n\n\n\n\nFront Matter#\n\nYou can add Front Matter at the beginning of your Markdown file, which is a\nYAML-formatted object that defines some metadata. For example:\n\n\n\n> Note: By default, Rspress uses h1 headings as html headings.\n\nYou can also access properties defined in Front Matter in the body, for example:\n\n\n\nThe previously defined properties will be passed to the component as frontmatter\nproperties. So the final output will be:\n\n\n\n\nCustom Container#\n\nYou can use the ::: syntax to create custom containers and support custom\ntitles. For example:\n\nInput:\n\n\n\nOutput:\n\nTIP\n\nThis is a block of type tip\n\nINFO\n\nThis is a block of type info\n\nWARNING\n\nThis is a block of type warning\n\nDANGER\n\nThis is a block of type danger\n\nDETAILS\n\nThis is a block of type details\n\nCustom Title\n\nThis is a block of Custom Title\n\nCustom Title\n\nThis is a block of Custom Title\n\n\nCode Block#\n\n\nBasic Usage#\n\nYou can use the ``` syntax to create code blocks and support custom titles. For\nexample:\n\nInput:\n\n\n\nOutput:\n\n\n\n\n\n\nShow Line Numbers#\n\nIf you want to display line numbers, you can enable the showLineNumbers option\nin the config file:\n\n\n\n\nWrap Code#\n\nIf you want to wrap long code line by default, you can enable the\ndefaultWrapCode option in the config file:\n\n\n\n\nLine Highlighting#\n\nYou can also apply line highlighting and code block title at the same time, for\nexample:\n\nInput:\n\n\n\nOuput:\n\n\n\n\nCustomizing anchor id#\n\nBy default, Rspress will automatically generate ids based on the content of each\ntitle. This id will also serve as the content of the anchor. You can use the\nfollowing syntax to customize the id of the header:\n\n\n\nWhere custom-id is your custom id.\n\n\nDisabling the Rust Version Compiler#\n\nIn default mode, Rspress uses the Rust version of the MDX compiler, which is\nfaster than the JavaScript version. However, the Rust version of the compiler\ndoes not support custom plugins.\n\nIf you need to add a custom MDX compiler plugin, you can disable the Rust\nversion of the MDX compiler through the following config and switch to the\nJavaScript version of the compiler:\n\nWhether to use the Rust version of the MDX compiler. For example:\n\n\n\nYou can also provide a function to determine which files use the Rust version of\nMDX compiler. For example:\n\n\n\nNOTICE\n\nThe bottom layer of mdxRs is based on the @rspress/mdx-rs-binding library\ndeveloped by Rspress. The performance is 10+ times higher than the JS version of\nthe MDX compiler, but the JS version of the plugin is not yet supported.","routePath":"/guide/basic/use-mdx","lang":"en","toc":[{"text":"Markdown","id":"markdown","depth":2,"charIndex":61},{"text":"Use Component","id":"use-component","depth":2,"charIndex":171},{"text":"Front Matter","id":"front-matter","depth":2,"charIndex":309},{"text":"Custom Container","id":"custom-container","depth":2,"charIndex":740},{"text":"Code Block","id":"code-block","depth":2,"charIndex":1163},{"text":"Basic Usage","id":"basic-usage","depth":3,"charIndex":1177},{"text":"Show Line Numbers","id":"show-line-numbers","depth":3,"charIndex":1305},{"text":"Wrap Code","id":"wrap-code","depth":3,"charIndex":1428},{"text":"Line Highlighting","id":"line-highlighting","depth":3,"charIndex":1553},{"text":"Customizing anchor id","id":"customizing-anchor-id","depth":2,"charIndex":1684},{"text":"Disabling the Rust Version Compiler","id":"disabling-the-rust-version-compiler","depth":2,"charIndex":1958}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"Internal Components","content":"#\n\n\nBadge#\n\nThe Badge component is used to display a badge. For example:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\n\nHelmet#\n\nIt is generally used to set custom head content in documents (using\nreact-helmet-async at the underlying level). The usage is as follows:\n\n\n\n\nHomeFeature#\n\nFeature component in Hero page, look the effect in this website.\n\n\n\n\nHomeHero#\n\nHero component in Hero page.\n\n\n\n\nLastUpdated#\n\nThe LastUpdated component is used to display the last update time of the current\npage. For example:\n\n\n\nTIP\n\nIf lastUpdated: true is not configured in the default theme, you need to install\nand register the @rspress/plugin-last-updated plugin.\n\n\nNoSSR#\n\nUsed to skip the ssr for some components. For example:\n\n\n\n\nOverview#\n\nOverview component, look the effect in this website\n\n\n\n\nPackageManagerTabs#\n\nThe PackageManagerTabs component is used to display commands for different\npackage managers in the documentation. The usage is as follows:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\nWhen command is set to a string, it will default to displaying three tabs: npm,\nyarn, pnpm and bun, and the component will automatically add the corresponding\npackage manager command before the command. If you need to display additional\ntabs, you can achieve this through additionalTabs.\n\nTIP\n\nIn the install command, special processing has been done for yarn and bun. If\nyour command is install some-packages, the install will be automatically\nreplaced with add in the yarn/bun tab.\n\n\nPrevNextPage#\n\nThe PrevNextPage component is used to display the previous and next pages of the\ncurrent page. For example:\n\n\n\nThe types of props included are as follows:\n\n\n\n\nSourceCode#\n\nThe SourceCode component is used to jump to the source code. For example:\n\n\n\nThe effect is as follows:\n\nThe types of props included are as follows:\n\n\n\n\nSteps#\n\nThe Steps component is used to turn your content into a visual representation of\nsteps.\n\n\n\nThe effect is as follows:\n\n\nTab/Tabs#\n\nYou can directly use the Tab/Tabs component in the document to achieve the\neffect of tab switching. For example:\n\n\n\nNote\n\nIn order to make it easier for you to use these components, the rspress/theme\npackage has been aliased inside the framework, so you can directly use @theme to\nimport these components.\n\nThe props type of the Tabs component is as follows:\n\n\n\ndefaultValue is used to set the tab item selected by default. This value will be\ncompared with the value field of the Tab component props, and if they are equal,\nthe tab will be selected.\n\ngroupId is used to sync the selected tab item between multiple Tabs\ncomponents.The groups with the same groupId will be synchronized.\n\ntabPosition is used to set the position of the tab list, it has two values: left\nand center, the default is left.\n\nThe props types of the Tab component are as follows:\n\n\n\nThe value field is used to identify the current tab, if not passed, the default\nlabel will be used.\n\n\nTable of Contents#\n\nRender TOC of current page\n\n","routePath":"/guide/default-theme/components","lang":"en","toc":[{"text":"Badge","id":"badge","depth":2,"charIndex":3},{"text":"Helmet","id":"helmet","depth":2,"charIndex":150},{"text":"HomeFeature","id":"homefeature","depth":2,"charIndex":301},{"text":"HomeHero","id":"homehero","depth":2,"charIndex":384},{"text":"LastUpdated","id":"lastupdated","depth":2,"charIndex":428},{"text":"NoSSR","id":"nossr","depth":2,"charIndex":687},{"text":"Overview","id":"overview","depth":2,"charIndex":754},{"text":"PackageManagerTabs","id":"packagemanagertabs","depth":2,"charIndex":821},{"text":"PrevNextPage","id":"prevnextpage","depth":2,"charIndex":1544},{"text":"SourceCode","id":"sourcecode","depth":2,"charIndex":1718},{"text":"Steps","id":"steps","depth":2,"charIndex":1883},{"text":"Tab/Tabs","id":"tabtabs","depth":2,"charIndex":2010},{"text":"Table of Contents","id":"table-of-contents","depth":2,"charIndex":2980}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"Doc Page","content":"#\n\n\nPage Type#\n\nYou can specify the pageType in the frontmatter metadata to use different\nlayouts in the page. By default, the pageType of the document is doc, so the\nsidebar on the left and the outline on the right will appear by default. If you\ndon't need these, you can set pageType to custom:\n\n\n\n\nSidebar#\n\nIn rspress.config.ts, you can configure the content of the sidebar, for details,\nplease refer to Sidebar Config.\n\n\nOutline Title#\n\nWith the outlineTitle config, you can set the title of the outline bar.\n\n\n\n\nPrevious/Next Page Text#\n\nWith the prevPageText and nextPageText config, you can set the previous/next\npage text.\n\n","routePath":"/guide/default-theme/doc-page","lang":"en","toc":[{"text":"Page Type","id":"page-type","depth":2,"charIndex":3},{"text":"Sidebar","id":"sidebar","depth":2,"charIndex":300},{"text":"Outline Title","id":"outline-title","depth":2,"charIndex":425},{"text":"Previous/Next Page Text","id":"previousnext-page-text","depth":2,"charIndex":517}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"Home Page","content":"#\n\nYou can define the content of the Home page through frontmatter, see FrontMatter\nConfig for detailed types. Here is a simple example:\n\n","routePath":"/guide/default-theme/home-page","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"Internationalization","content":"#\n\nTo achieve document internationalization in Rspress, you need to do the\nfollowing:\n\n 1. Defines I18n text data.\n 2. Configure locales and themeConfig.locales。\n 3. Configure the default language.\n 4. Create documents in different language version.\n 5. Configure sidebar and navbar.\n 6. Use useI18n in custom components.\n\n\nDefines I18n text data#\n\nCreate a new i18n.json in the current workspace, the directory structure is as\nfollows:\n\n\n\nIn this JSON file, you can define the text needed for internationalization, the\ntype definition is as follows:\n\n\n\nFor example:\n\n\n\nThese text data are used in both config file and custom components, which will\nbe introduced in detail later.\n\n\nConfigure locales#\n\nIn rspress.config.ts, you can configure locales data in two places:\n\n * locales, used to configure the lang, title, description and other information\n   of the site, mainly around the information of the site itself.\n * themeConfig.locales, used to configure the theme's lang, outline title,\n   previous page/next page text and other information, mainly for theme-related\n   config.\n\n\n\nNote\n\nIn the default theme, themeConfig.locales also contains all the fields in\nlocales, the former takes precedence.\n\nFor other international theme parameters, please refer to API type.\n\n\nConfigure the default language#\n\nAfter configure locales data, you need configure the default language of the\ndocument via lang, as shown in the following example:\n\n\n\nThis is important because for routes in the default language, the framework will\nremove the language prefix, such as /zh/guide/getting-started will be converted\nto /guide/getting-started.\n\n\nCreate documents in different language#\n\nAfter the above configuration, we can start to create documents in different\nlanguage versions. It is very simple. We only need to create the following\nstructure in the document root directory:\n\n\n\nAs you can see, we put documents in different languages in the en and zh\ndirectories under the docs directory, so that we can easily distinguish\ndocuments in different languages.\n\n\nConfiguring _meta.json#\n\nThrough the _meta.json file, we can configure the content of the nav bar and\nsidebar. For details, please refer to Auto Nav/Sidebar.\n\n\nNavigation Bar Level#\n\nIn the _meta.json configuration at the navigation bar level, you can specify\ntext as an i18n key, for example:\n\n\n\nHere, text is guide, this value will be automatically translated into 指南 or\nGuide, depending on the current language.\n\n\nSidebar Level#\n\nIn the _meta.json configuration at the sidebar level, you can specify label as\nan i18n key, for example:\n\n\n\nHere, label is getting-started, this value will be automatically translated into\n开始 or Getting Started, depending on the current language.\n\n\nUse useI18n in custom components#\n\nIn the process of MDX development or custom theme development, you may write\nsome custom components, which also need to use international text, so how to get\nit?\n\nThe framework provides useI18n this hook to get the internationalized text, the\nusage is as follows:\n\n\n\nFor better type hinting, you can configure paths in tsconfig.json:\n\n\n\nThen use it like this in the component:\n\n\n\nThis way you get type hints for all literal keys defined in i18n.json.","routePath":"/guide/default-theme/i18n","lang":"en","toc":[{"text":"Defines I18n text data","id":"defines-i18n-text-data","depth":2,"charIndex":323},{"text":"Configure `locales`","id":"configure-locales","depth":2,"charIndex":-1},{"text":"Configure the default language","id":"configure-the-default-language","depth":2,"charIndex":1275},{"text":"Create documents in different language","id":"create-documents-in-different-language","depth":2,"charIndex":1632},{"text":"Configuring _meta.json","id":"configuring-_metajson","depth":2,"charIndex":2051},{"text":"Navigation Bar Level","id":"navigation-bar-level","depth":3,"charIndex":2211},{"text":"Sidebar Level","id":"sidebar-level","depth":3,"charIndex":2468},{"text":"Use `useI18n` in custom components","id":"use-usei18n-in-custom-components","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"Multi Version","content":"#\n\nRspress's default theme supports multi-version document management. Next, we\nwill introduce how to access multi-version documents.\n\n\nmultiVersion config#\n\nConfigure the version list and default version through multiVersion, for\nexample:\n\n\n\nHere, default is the default version, and versions is the version list.\n\n\nAdding Multi-Version Documents#\n\nAccording to the version list you configured, add multi-version documents under\nthe docs directory, for example:\n\n\n\nIn Rspress's conventional routing, for the default version, the version path\nprefix will be automatically omitted. For example, v1/README.md will be rendered\nas the /README route, while v2/README.md will be rendered as the /v2/README\nroute.\n\nTip\n\nFor links in the document, you do not need to manually add the version prefix.\nRspress will automatically add the corresponding version prefix according to the\nversion of the current document. For example, the link /guide/README in\nv2/README.md will be rendered as /v2/guide/README.\n\n\nGet the Current Version in Components#\n\nIn components, you can get the current version through useVersion, for example:\n\n","routePath":"/guide/default-theme/multi-version","lang":"en","toc":[{"text":"`multiVersion` config","id":"multiversion-config","depth":2,"charIndex":-1},{"text":"Adding Multi-Version Documents","id":"adding-multi-version-documents","depth":2,"charIndex":316},{"text":"Get the Current Version in Components","id":"get-the-current-version-in-components","depth":2,"charIndex":997}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"Navbar","content":"#\n\nThe navbar is very important to a website. It allows users to quickly jump\nbetween different pages of the website, and also allows users to quickly find\nsome important information of the website.\n\n\nCustom Navigation Menu#\n\nYou can add a custom navigation menu in themeConfig.nav, configured as an array,\nas follows:\n\n\n\nThe nav bar is configured as an array, and each item in the array is a NavItem\nobject, which has the following types:\n\n\n\nThat is, each navbar element ( NavItem ) can be a link ( NavItemWithLink ), or a\nnavbar group containing child elements ( NavItemWithChildren ).\n\n\nNavItemWithLink#\n\n\n\nThe meanings of the attributes are as follows:\n\n * text - Navbar text\n * link - Navbar link\n * activeMatch - Activation rule for navbar links\n * position - Navbar menu item position\n\nAttribute details:\n\nactiveMatch is used to match the current route, when the route matches the\nactiveMatch rule, the nav item will be highlighted.\n\n> By default, activeMatch is the link attribute of NavItem.\n\nposition is used to configure independent positioning of top menu items, with\nthe following options available:\n\n * left placed in the left menu bar at the top of the menu item;\n * right pplaced in the right menu bar at the top of the menu item.\n\n> If the position is not configured, it will be placed on the right menu bar by\n> default, which is equivalent to configuring right .\n\n\nNavItemWithChildren#\n\n\n\nThe meanings of the attributes are as follows:\n\n * text - Navbar text\n * items - Subnavbar elements\n * position - Navbar menu item position with child navbar elements\n\n\nExample#\n\n\n\n\nLight/Dark Mode#\n\nBy default, the navbar will have a toggle button for Light/Dark mode, you can\ndisable it with the following config:\n\n\n\n\nRelated Links#\n\nSocial Links to the Site. For example:\n\n\n\nFor more configurations, please refer to links.","routePath":"/guide/default-theme/navbar","lang":"en","toc":[{"text":"Custom Navigation Menu","id":"custom-navigation-menu","depth":2,"charIndex":200},{"text":"NavItemWithLink","id":"navitemwithlink","depth":3,"charIndex":589},{"text":"NavItemWithChildren","id":"navitemwithchildren","depth":3,"charIndex":1383},{"text":"Example","id":"example","depth":3,"charIndex":1576},{"text":"Light/Dark Mode","id":"lightdark-mode","depth":2,"charIndex":1589},{"text":"Related Links","id":"related-links","depth":2,"charIndex":1727}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"Overview Page","content":"#\n\n\nEffect#\n\nRspress has a built-in preview page, the effect is as follows:\n\n\nHow to use#\n\nGenerating the preview page requires the following two steps:\n\n\n1. Create a new directory and configure frontmatter#\n\nFor example, create the following directories and files\n\n\n\nWe add the following to api/index.md:\n\n\n\n\n2. Configuring _meta.json#\n\nThe content structure of the preview page will be automatically generated\naccording to _meta.json and the corresponding h1, h2 titles of the article. For\nexample, the configuration of api/_meta.json is as follows:\n\n\n\nAt the same time, the file api/theme/_meta.json has the following content:\n\n\n\n> The detailed configuration usage of _meta.json can be referred to Auto\n> Nav/Sidebar.\n\nIn the above configuration, the final preview page will generate a group called\nTheme, which contains the h1, h2 titles of two articles: component.md(x) and\nutils.md(x). Of course, you can also refer to the config of the Theme group to\nadd more groups.","routePath":"/guide/default-theme/overview-page","lang":"en","toc":[{"text":"Effect","id":"effect","depth":2,"charIndex":3},{"text":"How to use","id":"how-to-use","depth":2,"charIndex":77},{"text":"1. Create a new directory and configure frontmatter","id":"1-create-a-new-directory-and-configure-frontmatter","depth":3,"charIndex":154},{"text":"2. Configuring `_meta.json`","id":"2-configuring-_metajson","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"Quick Start","content":"#\n\n\n1. Initialize the project#\n\n\nMethod 1: Create via CLI#\n\nYou can create a Rspress project using the create-rspress cli:\n\nInput the project directory name, and then the cli will create the project for\nyou.\n\n\nMethod 2: Manual Creation#\n\nFirst, you can create a new directory with the following command:\n\n\n\nExecute npm init -y to initialize a project. You can install Rspress using npm,\nyarn or pnpm:\n\nThen create the file with the following command\n\n\n\nAdd the following script to package.json:\n\n\n\nThen initialize a configuration file rspress.config.ts:\n\n\n\nAnd then create tsconfig.json, add the following config:\n\n\n\n\n2. Start Dev Server#\n\nStart the local development service with the following command:\n\n\n\nTIP\n\nFor the dev command, you can specify the port number or host of the development\nservice with the --port or --host parameter, such as rspress dev --port 8080\n--host 0.0.0.0.\n\n\n3. Build in Production#\n\nBuild the production bundle with the following command :\n\n\n\nBy default, Rspress will set doc_build as the output directory.\n\n\n4. Preview in local environment#\n\nStart the local preview service with the following command:\n\n","routePath":"/guide/start/getting-started","lang":"en","toc":[{"text":"1. Initialize the project","id":"1-initialize-the-project","depth":2,"charIndex":3},{"text":"Method 1: Create via CLI","id":"method-1-create-via-cli","depth":3,"charIndex":32},{"text":"Method 2: Manual Creation","id":"method-2-manual-creation","depth":3,"charIndex":209},{"text":"2. Start Dev Server","id":"2-start-dev-server","depth":2,"charIndex":617},{"text":"3. Build in Production","id":"3-build-in-production","depth":2,"charIndex":886},{"text":"4. Preview in local environment","id":"4-preview-in-local-environment","depth":2,"charIndex":1037}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"Introduction","content":"#\n\n\nPositioning#\n\nRspress is a static site generator based on Rspack, rendered with the React\nframework. It comes with a default documentation theme, and you can quickly\nbuild a documentation site with Rspress. You can also customize the theme to\nmeet your personalized static site needs, such as blog sites, product homepages,\netc. Of course, you can also integrate the corresponding plugins provided by the\nofficial to easily build component library documentation.\n\n\nProject Background#\n\nRspress is mainly built in the following directions:\n\n * Build Performance. Ensuring a fast enough startup speed brings a good\n   development experience.\n * MDX Support. Through MDX, we can conveniently reuse document fragments and\n   render custom React components in documents.\n * Basic Capabilities of Documentation Site. Including internationalization,\n   multi-version support, full-text search, component library documentation,\n   etc.\n * Extensibility. Such as Built-in plugin system, supports extending framework\n   functions through plugin API.\n\nThese also represent some core requirements for SSG site development. The\nfollowing will introduce these aspects separately.\n\n\nBuild Performance#\n\nAs the project becomes larger and larger, team members often worry about the\nlengthy project startup time, which negatively affects the development\nexperience. The longer the project development time, the more obvious this\ndeterioration of experience.\n\nWe couldn't help but start thinking, can we break the limitations of the current\ncommunity tool chain, break through the performance bottleneck of the existing\nSSG framework, and achieve the effect of instant startup for most project\nscenarios?\n\nThen, we continued to explore in this direction and finally achieved this effect\non Rspress. Taking the content of Rspress's official website documentation as an\nexample, the performance comparison between Rspress, Docusaurus, and Nextra is\nas follows:\n\nIf there is only one most core optimization method, it is undoubtedly the Rust\nFrontend Toolchain. We mainly use the Rust toolchain in two\nperformance-sensitive parts:\n\n * Front-end Bundler. Traditional Bundlers include webpack, Rollup, etc. For a\n   front-end project, the bundler is the integration hub of various compilation\n   tool chains. It is a very critical engineering capability and has a huge\n   impact on project construction performance. Rspress uses Rspack developed by\n   the team. Rspack is a Bundler based on Rust, with built-in multiple\n   performance optimization methods, such as multi-threaded parallel\n   compilation, incremental compilation, etc., which are 5 to 10 times more\n   efficient than traditional packaging tools in the community.\n * Markdown compiler. For another major compilation performance bottleneck in\n   the SSG framework, namely Markdown Compilation, we also Rust this process to\n   further speed up and customize Rspress's Markdown compiler (ie\n   @rspress/mdx-rs). This compiler is nearly 20 times more efficient than the JS\n   version of the compiler in the community:\n\nAt the same time, Rspress internally also applies many other build optimization\nmethods, such as pre-bundle of theme, etc. These additional optimization\nmethods, combined with the powerful Rust front-end toolchain, push the\ncompilation performance of the SSG framework to a new height.\n\n\nMDX Support#\n\nIn order to ensure the flexibility of content development, Rspress chooses to\nsupport the MDX content format.\n\nBecause MDX actually represents a componentized content organization method\nbehind it. On the one hand, documents are components, so we can reuse document\nfragments between different documents. On the other hand, any custom React\ncomponents can be introduced in the document, greatly releasing the imagination\nof document development.\n\n\nBasic Capabilities of Documentation Site#\n\nOf course, Rspress has also done a lot of work on the polishing of the basic\ncapabilities of the documentation site, supporting the following functional\nfeatures:\n\n * Automatically generate layouts, including navigation bars, left sidebars,\n   etc.\n * Static site generation, HTML is directly output after production build.\n * Internationalization, support for multi-language documents.\n * Full-text search, provide out-of-the-box search function.\n * Multi-version document management.\n * Custom document theme.\n * Automatically generate component Demo preview and playground.\n\nIn the following text, we will introduce these functional features in detail.\n\n\nExtension Mechanism#\n\nRspress internally designed various extension mechanisms to ensure sufficient\ncustomization capabilities, including:\n\n * Support for custom global components, global styles, page layout structure,\n   please refer to Custom Page.\n * Support build extension, including custom Rspack config, adding MDX\n   compilation plugins, etc., please refer to Build Extension.\n * Support custom theme, please refer to Custom Theme.\n * Built-in plugin system, support for custom plugins, please refer to Plugin\n   System.\n\n\nFeatures#\n\nNext, let's introduce the main functional features of Rspress.\n\n\nAutomatic Layout Generation#\n\nFor the construction of a documentation site, in addition to displaying the main\ncontent, we generally need the following layout modules:\n\n * Navigation bar, used to provide global navigation entrance.\n * Sidebar, used to display the article directory under the current navigation.\n * Article outline column, used to display the outline structure of the current\n   page.\n\nFor the document outline, Rspress will automatically extract the various titles\nin the document, generate outline information, and display it on the right side\nof the article page by default, without any other operations.\n\nFor the navigation bar and sidebar, we provide two config methods, you can\nchoose one of them:\n\n * Declarative config. Configure the corresponding data by declaring _meta.json\n   in the directory, such as:\n\n\n\nYou can read the Auto Nav/Sidebar for config details.\n\n * Programming config. Implement it by specifying the nav and sidebar config\n   items in the Rspress config.\n\nWe recommend using declarative config under normal scenes, which has many\nbenefits:\n\n 1. Make config file is more concise and clear.\n 2. The correspondence between the file directory structure and the sidebar\n    directory structure is more intuitive.\n 3. When adding or deleting a sidebar directory, operate directly in the current\n    directory, instead of going to the rspress.config.ts config file to locate\n    the corresponding position and then add/delete the config, thereby reducing\n    the cost of switching development context.\n\nThe programming config is very useful in some scenarios where dynamic config\ngeneration is needed. For example, the official Rspress TypeDoc plugin will\nautomatically convert a json data provided by TypeDoc into nav and sidebar\nconfigs.\n\n\nMDX Support#\n\nMDX is a powerful content development format. You can not only write Markdown\nfiles as usual, but also use React components in the content of Markdown:\n\nIn addition, Rspress also supports some specific syntax, such as:\n\n * Custom container syntax.\n * FrontMatter metadata definition.\n * Code line highlighting syntax.\n\nDetails can be found in the Use MDX Document.\n\n\nSSG#\n\nRspress is a SSG framework. In the build process in the production environment,\nit will automatically help you generate static sites, that is, generate HTML\ncontent for each page. After the build process is completed, HTML will appear in\nthe default output directory.\n\nThen, you can deploy the contents of this product directory to any static site\nhosting service, such as Github Pages, Netlify, Vercel, etc.\n\nAt the same time, we also provide config to easily customize the HTML content\ngenerated by SSG. For details, please refer to the Static Site Generation\nDocument.\n\n\nInternationalization (I18n)#\n\nInternationalization is a common requirement in a document-type site, and\nRspress encapsulates the ability of internationalization to be simple and easy\nto use. In the framework, we abstract internationalization into the following\nrequirements:\n\n * How to define I18n data source?\n * How to configure the site under different languages?\n * How to organize the document directory of different language versions?\n * How to use I18n data source in custom components?\n\nThe framework has already supported these demand scenarios for you. You can\nfollow the I18n Tutorial to step by step to implement internationalization for\nyour site.\n\n\nMulti-version Documents#\n\nIn some scenarios, we need to manage multi-version documents, and Rspress has\nbuilt-in support for multi-version documents. On the one hand, you can enable\nthis capability through simple config. On the other hand, you only need to\norganize the directory as usual, without introducing unnecessary directories and\nconcepts, minimizing the mental burden:\n\n\n\n\n\n\nFull Text Search#\n\nRspress provides out-of-the-box full-text search capabilities, which you can\naccess without any config. It is based on the open-source FlexSearch engine,\nwith the following effect:\n\n\nCustom Theme#\n\nRspress supports two ways to customize themes:\n\n 1. Extend from the default theme. In each component of the default theme, many\n    slots are provided for you to add custom layout content, for example:\n\n\n\n 2. Fully customized theme. If you want to develop a custom theme from scratch,\n    you can customize the content of Layout and use various Runtime APIs\n    provided by Rspress (such as usePageData) to obtain compile-time data,\n    routing information, etc.\n\nFor details about custom themes, you can refer to the Custom Theme\nDocumentation.\n\n\nPlugin System#\n\nThe plugin system is a crucial part of Rspress, which can help you conveniently\nextend the framework's functionality during site construction. Details can be\nfound in the Plugin Introduction Documentation.\n\n\nComponent Documentation#\n\nDemo Preview#\n\nRspress provides a preview plugin, which can automatically generate component\npreviews for you. After you register the preview plugin, declare the following\ncode block in the mdx file:\n\n\n\nThen you can see the following preview effect:\n\n\n\nOf course, the plugin also supports mobile preview mode, which you can enable\nthrough plugin config:\n\n\n\nDemo Real-time Playground#\n\nFor component documentation, if real-time editing capabilities can be provided\nfor components, it will greatly enhance the interactive experience of the\ndocumentation.\n\nTo achieve this feature, you only need to register the official playground\nplugin, and then declare your code block in the .mdx file. (Take the above code\nblock as an example)\n\nNext, you will see the following playground effect in the documentation:\n\n\n\n\nBuilt-in Smooth Transition Animation#\n\nView Transition API is a set of APIs natively provided by modern browsers for\nimplementing transition effects during page jumps. In Rspress, we also followed\nup on this feature, implemented document transition animations based on View\nTransition, and did not use any third-party SPA animation schemes. In the\nfuture, we will explore more animation effects to further enhance the\nexperience.\n\n\n\n\nDifferences from Other SSG Frameworks#\n\n\nDifferences from Docusaurus#\n\nDocusaurus is an open-source SSG framework by Meta. Like Rspress, it uses React\nas the rendering framework and supports MDX. However, the main differences\nbetween Rspress and Docusaurus are:\n\n 1. Rspress has better build performance. Based on the Rust front-end toolchain,\n    Rspress's project startup/build speed is 5 ~ 10 times faster than\n    Docusaurus. For details, refer to Build Performance.\n\n 2. Rspress has simpler config and lower learning curve. Rspress's config is\n    simpler, does not introduce too many concepts, and reduces cognitive load as\n    much as possible. For example, it provides out-of-the-box search\n    functionality, intuitive multi-version document management, etc.\n\n 3. Rspress provides a higher level of abstraction for Bundler in its\n    architecture. For low-level Bundlers like webpack and Rspack, their config\n    items are complex and not easy to get started with. Docusaurus chooses to\n    directly expose the config items of the underlying Bundler, while Rspress\n    provides a higher level of abstraction for Bundler, offering simpler and\n    more user-friendly config items. For instance, you can easily add tags in\n    through builderConfig.html.tags, without having to register related plugins\n    via Bundler like html-webpack-plugin.\n\n\nDifferences from Nextra#\n\nNextra is an open-source SSG framework by Vercel. Like Rspress, it also uses\nReact as the rendering framework and supports MDX. The main differences between\nRspress and Nextra are:\n\n 1. Rspress has better build performance. This point can be referred to\n    \"Differences from Docusaurus\".\n 2. Rspress is overall lighter. Nextra relies on Next.js, and its SSG process is\n    also based on Next.js. Therefore, the SSG output is not purely HTML files,\n    but includes some runtime code from Next.js. On one hand, this leads to a\n    larger size of Nextra's output. On the other hand, it needs to be deployed\n    as an application (using the next start command) rather than being deployed\n    as a pure static site. But Rspress is not bound to any application\n    framework, so its output is lighter and can be conveniently deployed as a\n    pure static site.\n\n\nDifferences from VitePress#\n\nVitePress is a static site generator based on Vite. It is characterized by using\nVue as the rendering framework and has excellent performance. The main\ndifferences between Rspress and VitePress are:\n\n 1. Rspress uses React as the rendering framework, while VitePress uses Vue.\n 2. Rspress uses MDX for content development, while VitePress uses Markdown and\n    supports Vue components in Markdown, which also leads to differences in the\n    implementation of the underlying compilation toolchain.\n 3. In terms of build performance, during the development phase, both Rspress\n    and VitePress can quickly start a project. However, in the production\n    environment, VitePress needs to bundle the project based on Rollup, so it\n    will face similar performance issues with other JavaScript-based toolchains.\n    At this time, Rspress will have faster build speed.\n\n\nTry Rspress#\n\nGo to Quick Start to learn how to use Rspress to quickly build a documentation\nsite.","routePath":"/guide/start/introduction","lang":"en","toc":[{"text":"Positioning","id":"positioning","depth":2,"charIndex":3},{"text":"Project Background","id":"project-background","depth":2,"charIndex":468},{"text":"Build Performance","id":"build-performance","depth":3,"charIndex":1171},{"text":"MDX Support","id":"mdx-support","depth":3,"charIndex":3347},{"text":"Basic Capabilities of Documentation Site","id":"basic-capabilities-of-documentation-site","depth":3,"charIndex":3809},{"text":"Extension Mechanism","id":"extension-mechanism","depth":3,"charIndex":4510},{"text":"Features","id":"features","depth":2,"charIndex":5041},{"text":"Automatic Layout Generation","id":"automatic-layout-generation","depth":3,"charIndex":5117},{"text":"MDX Support","id":"mdx-support-1","depth":3,"charIndex":6895},{"text":"SSG","id":"ssg","depth":3,"charIndex":7276},{"text":"Internationalization (I18n)","id":"internationalization-i18n","depth":3,"charIndex":7856},{"text":"Multi-version Documents","id":"multi-version-documents","depth":3,"charIndex":8519},{"text":"Full Text Search","id":"full-text-search","depth":3,"charIndex":8903},{"text":"Custom Theme","id":"custom-theme","depth":3,"charIndex":9105},{"text":"Plugin System","id":"plugin-system","depth":3,"charIndex":9668},{"text":"Component Documentation","id":"component-documentation","depth":3,"charIndex":9892},{"text":"Demo Preview","id":"demo-preview","depth":4,"charIndex":9918},{"text":"Demo Real-time Playground","id":"demo-real-time-playground","depth":4,"charIndex":10275},{"text":"Built-in Smooth Transition Animation","id":"built-in-smooth-transition-animation","depth":3,"charIndex":10726},{"text":"Differences from Other SSG Frameworks","id":"differences-from-other-ssg-frameworks","depth":2,"charIndex":11160},{"text":"Differences from Docusaurus","id":"differences-from-docusaurus","depth":3,"charIndex":11201},{"text":"Differences from Nextra","id":"differences-from-nextra","depth":3,"charIndex":12513},{"text":"Differences from VitePress","id":"differences-from-vitepress","depth":3,"charIndex":13398},{"text":"Try Rspress","id":"try-rspress","depth":2,"charIndex":14293}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"rspress-plugin-translate","content":"#\n\nRspress plugin for translating files using LLM, currently only supports GPT.\n\n\nInstallation#\n\n\nUsage#\n\n\n\nWhen you start the project, the plugin will automatically translate the files in\nthe source language folder under your document root directory into the target\nlanguage and save them in the target language folder.\n\nFor files in the source language folder that do not need to be translated, they\nwill also be automatically copied to the target language folder every time you\nstart the project.\n\nNote that the plugin will do a hash cache on the files in the source language\nfolder every time you start the project. If it finds updates compared to the\nprevious cache, it will re-translate the files, otherwise it will skip the\nfiles.\n\n\nParameter Description#\n\n\nmodelConfig#\n\n * Type: Object\n\nmodelConfig.clientOptions#\n\n * Type: ClientOptions {}\n\nClient settings for calling OpenAI, including API-KEY, Agent, etc. For details,\nyou can go to Type Declarations to see all supported parameters.\n\nmodelConfig.model#\n\n * Type: string\n * Default: gpt-3.5-turbo\n\nThe name of the model used to call OpenAI. You can go to the Model List to see\nall supported model names.\n\n\nmatch#\n\n * Type: Object\n\nCustomize the configuration for matching files that need to be translated.\n\nmatch.exclude#\n\n * Type: string[]\n * Default: []\n\nExclude certain files from translation. For example:\n\n\n\n> Note: The strings in the array support glob patterns.\n\nmatch.extensions#\n\n * Type: string[]\n * Default: []\n\nThe file extensions of files included in the translation process. By default,\nRspress includes all 'md', 'mdx' files in the routes. If you want to customize\nthe extensions, you can use this option. For example:\n\n\n\n\nrateLimitPerMinute#\n\n * Type: Number\n * Default: 3\n\nRate limit for the large model, default is 3 requests per minute.\n\n\ngetPrompt#\n\n * Type: Function\n\nPrompt function for the large model, which takes three parameters: content\n(content of the source language file), from (name of the source language), and\nto (name of the target language). The return value of this function will be used\nas the prompt parameter passed to the large model. For example:\n\n","routePath":"/plugin/community-plugins/translate","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":81},{"text":"Usage","id":"usage","depth":2,"charIndex":97},{"text":"Parameter Description","id":"parameter-description","depth":2,"charIndex":739},{"text":"modelConfig","id":"modelconfig","depth":3,"charIndex":764},{"text":"modelConfig.clientOptions","id":"modelconfigclientoptions","depth":4,"charIndex":795},{"text":"modelConfig.model","id":"modelconfigmodel","depth":4,"charIndex":996},{"text":"match","id":"match","depth":3,"charIndex":1167},{"text":"match.exclude","id":"matchexclude","depth":4,"charIndex":1268},{"text":"match.extensions","id":"matchextensions","depth":4,"charIndex":1431},{"text":"rateLimitPerMinute","id":"ratelimitperminute","depth":3,"charIndex":1699},{"text":"getPrompt","id":"getprompt","depth":3,"charIndex":1819}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"@rspress/plugin-api-docgen","content":"#\n\nThe plugin is used to generate api documentation automatically, powered by\nreact-docgen-typescript and documentation.\n\n\nInstall#\n\n\nUsage#\n\nFirst of all, you need to add following config:\n\n\n\nThen you can use API component to inject api documentation to your mdx file:\n\n\n\n\nConfig#\n\nThe plugin accepts an object, which has the following types:\n\n\n\n\nappDir#\n\nappDir is used to configure the base directory for parsing，default\nprocess.cwd().\n\n\nentries#\n\nentries is used to configure the basic info for parsing.\n\n * key is an identifier that serves as the moduleName attribute of the API\n   component.\n * value is the relative path to the parsed file.\n\n\napiParseTool#\n\napiParseTool is used to choose the tool for parsing，default\nreact-docgen-typescript:\n\n * react-docgen-typescriptis used for component library scenarios, only props\n   will be parsed to generate tables.\n\n\n\nThe above is a standard writeup where ButtonProps will be extracted into the\nform and Button will be used as the form title. If you use the default export,\nthe filename will be used as the form title.\n\nNotice that export features declared elsewhere are not available.\n\n\n\nThe generated content is as follows:\n\n\n\nWARNING\n\nIf React types are used in Props, you need to add the types in tsconfig.json,\notherwise the types will not be resolved under the React namespace.\n\n\n\nThe best way is that you import the type directly:\n\n\n\n * documentation is used in tool library scenarios to parse JSDoc annotations.\n   Here is a greet function with JSDoc annotations.\n\n\n\nThe generated content is as follows:\n\n","routePath":"/plugin/official-plugins/api-docgen","lang":"en","toc":[{"text":"Install","id":"install","depth":2,"charIndex":122},{"text":"Usage","id":"usage","depth":2,"charIndex":133},{"text":"Config","id":"config","depth":2,"charIndex":273},{"text":"appDir","id":"appdir","depth":3,"charIndex":347},{"text":"entries","id":"entries","depth":3,"charIndex":440},{"text":"apiParseTool","id":"apiparsetool","depth":3,"charIndex":649}],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"@rspress/container-syntax","content":"#\n\nRspress's built-in plugin. It mainly have two functions:\n\n * Parse the container syntax in Markdown/MDX, such as :::tip, :::warning, and\n   compile them into JSX syntax.\n * Add styles to the container block.","routePath":"/plugin/official-plugins/container-syntax","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"@rspress/plugin-last-updated","content":"#\n\n\nIntroduction#\n\n@rspress/plugin-last-updated is a plugin for displaying the last updated time in\narticles.\n\nTip\n\nWhen you have configured lastUpdated: true in the default theme, this plugin\nwill be automatically activated. You don't need to install and register it\nmanually.\n\n\nInstallation#\n\n\nUsage#\n\n\n1. Register the Plugin#\n\n\n\n\n2. Access at Runtime#\n\nAfter registering the plugin, you can get the last updated timestamp of the\narticle at runtime. Here's an example:\n\n","routePath":"/plugin/official-plugins/last-updated","lang":"en","toc":[{"text":"Introduction","id":"introduction","depth":2,"charIndex":3},{"text":"Installation","id":"installation","depth":2,"charIndex":279},{"text":"Usage","id":"usage","depth":2,"charIndex":295},{"text":"1. Register the Plugin","id":"1-register-the-plugin","depth":3,"charIndex":304},{"text":"2. Access at Runtime","id":"2-access-at-runtime","depth":3,"charIndex":332}],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"@rspress/plugin-medium-zoom","content":"#\n\nDefault built-in plugin for supporting image zooming.\n\n\nConfig#\n\nSince this plugin is a built-in plugin, there's no need to manually register it\nin the config file. You just need to configure it in the mediumZoom field. For\nexample:\n\n\n\n\nselector#\n\n * Type: string\n * Default value: .rspress-doc img\n\nCustomize the image selector.\n\n\noptions#\n\n * Type: ZoomOptions\n * Default value: {}\n\nConfig items for medium-zoom. Click here for more details on the configuration.","routePath":"/plugin/official-plugins/medium-zoom","lang":"en","toc":[{"text":"Config","id":"config","depth":2,"charIndex":58},{"text":"selector","id":"selector","depth":3,"charIndex":239},{"text":"options","id":"options","depth":3,"charIndex":334}],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"Overview","content":"#\n\n\nOfficial Plugins#\n\nOfficial plugins include:\n\n * @rspress/plugin-medium-zoom: medium-zoom plugin, used to zoom in images.\n * @rspress/plugin-last-updated: Support for displaying the last update time of\n   the article.\n * @rspress/plugin-container-syntax: Support container syntax in Markdown/MDX.\n * @rspress/plugin-typedoc: Integrate TypeDoc, used to generate API\n   documentation of TS module automatically.\n * @rspress/plugin-preview: Support preview of code blocks in Markdown/MDX.\n * @rspress/plugin-playground: Provide a real-time playground to preview the\n   code blocks in Markdown/MDX files.\n * @rspress/plugin-shiki: Integrates Shiki for code syntax highlighting.\n\n\nCommunity Plugins#\n\nCommunity plugins include:\n\n * rspress-plugin-translate: A plugin that integrates LLM for document\n   translation.","routePath":"/plugin/official-plugins/overview","lang":"en","toc":[{"text":"Official Plugins","id":"official-plugins","depth":2,"charIndex":3},{"text":"Community Plugins","id":"community-plugins","depth":2,"charIndex":679}],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"@rspress/plugin-playground","content":"#\n\nProvide a real-time playground to preview the code blocks in MDX files.\n\n\nInstallation#\n\n\nUsage#\n\n\nRegister#\n\nFirst, write the following config in the config file:\n\n\n\nNote\n\nThis plugin will set markdown.mdxRs to false. In the future, the Rspress team\nwill port this plugin to the Rust version of the compiler.\n\n\nInternal Components#\n\nNote\n\nIt is recommended to use js or jsx to write sample code to avoid ts type errors\nin the editor.\n\nThe component code of internal components is declared in the mdx file. This\nplugin supports jsx and tsx. You can declare the following code block in the mdx\nfile:\n\n\n\nOtherwise, You can use direction parameter to specify the playground layout,\nhorizontal and vertical are supported:\n\n\n\nIt's worth noting that you need to export the component as default, and Rspress\nwill automatically render this component.\n\nBut if you want to keep the style of the code block instead of rendering it as a\ncomponent, you can add the pure identifier to specify, the usage is as follows:\n\n\n\nIf you have set defaultRenderMode to 'pure', Rspress will not render this\ncomponent by default, but instead display it as a code block. If you want to\nrender a code block as a component in this situation, you can do add the preview\nidentifier to specify, the usage is as follows:\n\n\n\nTip\n\nMake sure the document ends with .mdx.\n\n\nExternal Components#\n\nIn addition to writing the component code in the code block of the mdx file, you\ncan also write the component code in an external file, and then import it in the\nmdx file through the code tag. For example\n\n\n\n\n\nSame as internal components, external components also support direction\nattribute:\n\n\n\nExternal components also need to export the component as default. Through the\nsrc attribute of the code tag, you can specify the path of the external\ncomponent. This plugin supports both relative paths and alias paths(alias).\n\nFor some more complex components, this way of using external components will be\nmore convenient.\n\n\nDefine the layout of the entire page#\n\nYou can write playgroundDirection in frontmatter to define the layout of the\neditor and preview area in the entire page.\n\n\n\nPriority: Defined directly on the preview area > Page Definition >\nConfiguration.\n\n\nConfiguration#\n\nThis plugin accepts an object parameter, the type is as follows:\n\n\n\nNote\n\nmonacoLoader and monacoOptions will be serialized to JSON, so some data types,\nsuch as functions and circularly referenced objects, are not supported.\n\n\nrender#\n\nYou can customize the render file for rendering Playground. Please note that the\nfile name must be Playground.(jsx?|tsx?)\n\n\n\nIn the custom playground, you can directly import the original editor and\nrenderer, and import pre-packaged dependencies through\n_rspress_playground_imports:\n\n\n\nYou can refer to the built-in Playground.tsx.\n\n\ninclude#\n\nBy default, this plugin will automatically scan all import statements in the\ndemos, the packages not used in the demos cannot be used in the playground. If\nyou want to add other packages to the playground, you can use the include\nparameter:\n\n\n\n\nbabelUrl#\n\nPlayground uses @babel/standalone to compile the demo code, loaded from\ncdnjs.com by default.\n\nYou can modify the URL served to other CDNs, such as unpkg, jsdelivr, etc.\n\n\nmonacoLoader#\n\nConfigure monaco-loader behaviors, loaded from cdnjs.com by default.\n\nYou can modify the URL served to other CDNs, such as unpkg, jsdelivr, etc.\n\nThe full document can be found at suren-atoyan/monaco-loader\n\n\nmonacoOptions#\n\nConfigure monaco editor, corresponding to IStandaloneEditorConstructionOptions\n\n\ndefaultRenderMode#\n\nThe default mode of rendering internal code blocks that do not have the pure or\nplayground identifiers declared by users, defaulting to playground.\n\n * pure: render as regular code block\n * playground: render as Playground component","routePath":"/plugin/official-plugins/playground","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":76},{"text":"Usage","id":"usage","depth":2,"charIndex":92},{"text":"Register","id":"register","depth":3,"charIndex":101},{"text":"Internal Components","id":"internal-components","depth":3,"charIndex":314},{"text":"External Components","id":"external-components","depth":3,"charIndex":1339},{"text":"Define the layout of the entire page","id":"define-the-layout-of-the-entire-page","depth":3,"charIndex":1983},{"text":"Configuration","id":"configuration","depth":2,"charIndex":2230},{"text":"render","id":"render","depth":3,"charIndex":2473},{"text":"include","id":"include","depth":3,"charIndex":2816},{"text":"babelUrl","id":"babelurl","depth":3,"charIndex":3071},{"text":"monacoLoader","id":"monacoloader","depth":3,"charIndex":3254},{"text":"monacoOptions","id":"monacooptions","depth":3,"charIndex":3478},{"text":"defaultRenderMode","id":"defaultrendermode","depth":3,"charIndex":3575}],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"@rspress/plugin-preview","content":"#\n\nUsed to preview components in the code block of md(x) files.\n\n\nInstallation#\n\n\nUsage#\n\n\nRegister#\n\nFirst, write the following config in the config file:\n\n\n\nNote\n\nThis plugin will set markdown.mdxRs to false. In the future, the Rspress team\nwill port this plugin to the Rust version of the compiler.\n\n\nInternal Components#\n\nThe component code of internal components is declared in the mdx file. You can\ndeclare the following code block in the mdx file:\n\n\n\nIt's worth noting that you need to export the component as default, and Rspress\nwill automatically render this component.\n\nBut if you want to keep the style of the code block instead of rendering it as a\ncomponent, you can add the pure identifier to specify, the usage is as follows:\n\n\n\nIf you have set defaultRenderMode to 'pure', Rspress will not render this\ncomponent by default, but instead display it as a code block. If you want to\nrender a code block as a component in this situation, you can do add the preview\nidentifier to specify, the usage is as follows:\n\n\n\nTip\n\nMake sure the document ends with .mdx.\n\n\nExternal Components#\n\nIn addition to writing the component code in the code block of the mdx file, you\ncan also write the component code in an external file, and then import it in the\nmdx file through the code tag. For example\n\n\n\n\n\nExternal components also need to export the component as default. Through the\nsrc attribute of the code tag, you can specify the path of the external\ncomponent. This plugin supports both relative paths and alias paths(alias).\n\nFor some more complex components, this way of using external components will be\nmore convenient.\n\n\nOptions#\n\nThis plugin accepts an object parameter of the following type:\n\n\n\n\ndefaultRenderMode#\n\nThe default mode of rendering internal code blocks that do not have the pure or\npreview identifiers declared by users, defaulting to preview.\n\n * pure: render as regular code block\n * preview: render as component\n\n\npreviewMode#\n\nThe previewMode parameter is used to specify whether the preview mode is\ninternal, defaulting to internal. The default mode display effect is as follows:\n\n\n\nYou can also set it for each individual code block:\n\n\n\n\n\nIf previewMode is inframe, you can use the following configuration for the\niframe:\n\n\niframeOptions.position#\n\nIn iframe preview mode, you can use the iframeOptions.position parameter to\ndetermine the position of the preview area iframe, whether it follows page\nscrolling (follow mode) or is fixed on the page (fixed mode), defaulting to\nfollow.\n\nThe effect of follow mode is as follows:\n\n\n\nThe effect of fixed mode is as follows:\n\n\n\n\niframeOptions.framework#\n\nIn iframe preview mode, you can choose the rendering framework, currently\nsupports react and solid.\n\n\niframeOptions.devPort#\n\nIn the iframe preview mode, you can configure the dev server port of the preview\ncomponent.\n\n\niframeOptions.builderConfig#\n\nConfigure the buildConfig of the iframe, such as adding some global code.\n\n\ndeprecated: isMobile#\n\nFrom v1.12.0, please use previewMode instead.\n\n\ndeprecated: iframePosition#\n\nFrom v1.12.0, please use iframeOptions.position instead.","routePath":"/plugin/official-plugins/preview","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":65},{"text":"Usage","id":"usage","depth":2,"charIndex":81},{"text":"Register","id":"register","depth":3,"charIndex":90},{"text":"Internal Components","id":"internal-components","depth":3,"charIndex":303},{"text":"External Components","id":"external-components","depth":3,"charIndex":1073},{"text":"Options","id":"options","depth":2,"charIndex":1631},{"text":"defaultRenderMode","id":"defaultrendermode","depth":3,"charIndex":1708},{"text":"previewMode","id":"previewmode","depth":3,"charIndex":1943},{"text":"iframeOptions.position","id":"iframeoptionsposition","depth":3,"charIndex":2256},{"text":"iframeOptions.framework","id":"iframeoptionsframework","depth":3,"charIndex":2605},{"text":"iframeOptions.devPort","id":"iframeoptionsdevport","depth":3,"charIndex":2733},{"text":"iframeOptions.builderConfig","id":"iframeoptionsbuilderconfig","depth":3,"charIndex":2851},{"text":"deprecated: isMobile","id":"deprecated-ismobile","depth":3,"charIndex":2957},{"text":"deprecated: iframePosition","id":"deprecated-iframeposition","depth":3,"charIndex":3028}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"@rspress/plugin-shiki","content":"#\n\nIntegrated Shiki code highlighting plugin. By default, Rspress uses Prism.js to\nachieve syntax highlighting. However, in some cases, when you need to implement\ncode highlighting for more languages, Prism.js may not be sufficient, so you can\nintegrate this plugin to use Shiki to support more languages.\n\nNote\n\nHowever, after introducing the Shiki plugin, the compilation performance of\nRspress will decrease, so please evaluate whether you need to introduce this\nplugin based on your needs.\n\n\nInstallation#\n\n\nUsage#\n\nFirst, write the following configuration in the configuration file:\n\n\n\n\nConfiguration#\n\nThis plugin supports passing in an object configuration. The properties of this\nobject configuration are as follows:\n\n\n\nThe code highlighting theme uses css-variables. You can also choose your\nfavorite theme, refer to the Shiki theme list documentation for details.\n\nThe default languages supported include js, jsx, ts, tsx, json, css, scss, less,\nxml, diff, yaml, md, mdx, bash. If you want to support more languages, you can\npass the langs attribute in the configuration file. This attribute is an array,\neach item in the array is an id of a language, refer to the Shiki-supported\nlanguage list for details.\n\n\nTransformer Concept and Usage#\n\nTransformer is a concept in this plugin, its function is to transform specific\nsyntax of code blocks, for example, you can use this feature to implement the\ndiff highlighting effect of code blocks.\n\n\nIntroduction to Built-in Transformers#\n\nA few Transformers are built into this plugin, including:\n\n * createTransformerDiff: Implementation of the diff highlighting effect of the\n   code block.\n * createTransformerLineNumber: Implement the display of the line number of the\n   code block.\n * createTransformerErrorLevel: Implement the display of the error level of the\n   corresponding line of the code block, including error and warning.\n * createTransformerHighlight: Implement line highlighting display of the code\n   block.\n * createTransformerFocus: Implement line focus display of the code block.\n\nYou can enable these Transformers by configuring the transformers attribute,\nsuch as:\n\n\n\nThen let us introduce how to use the syntax corresponding to these Transformers.\n\nDiff highlighting#\n\nUse the diff syntax in the markdown code block, such as:\n\n\n\nThis will automatically apply the diff highlighting effect to the corresponding\nline of code.\n\nLine number display#\n\nUse the hl syntax in the markdown code block, such as:\n\n\n\nThis will automatically display the line number for the corresponding line of\ncode.\n\nError level display#\n\nUse the error or warning syntax in the markdown code block, such as:\n\n\n\nThis will automatically display the error level for the corresponding line of\ncode.\n\nLine focus display#\n\nUse the focus syntax in the markdown code block, such as:\n\n\n\nThis will automatically display the focus effect for the corresponding line of\ncode.","routePath":"/plugin/official-plugins/shiki","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":495},{"text":"Usage","id":"usage","depth":2,"charIndex":511},{"text":"Configuration","id":"configuration","depth":2,"charIndex":591},{"text":"Transformer Concept and Usage","id":"transformer-concept-and-usage","depth":2,"charIndex":1219},{"text":"Introduction to Built-in Transformers","id":"introduction-to-built-in-transformers","depth":3,"charIndex":1451},{"text":"Diff highlighting","id":"diff-highlighting","depth":4,"charIndex":2226},{"text":"Line number display","id":"line-number-display","depth":4,"charIndex":2401},{"text":"Error level display","id":"error-level-display","depth":4,"charIndex":2566},{"text":"Line focus display","id":"line-focus-display","depth":4,"charIndex":2745}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"@rspress/plugin-typedoc","content":"#\n\nIntegration of TypeDoc's Rspress Plugin for Automatically Generating API\nDocumentation for TS Modules.\n\n\nInstallation#\n\n\nUsage#\n\n\n\n\n\n\n\nWhen you start/build the project, the plugin will automatically generate an api\ndirectory in your document root directory. The directory structure is as\nfollows:\n\n\n\nThis means that the plugin will internally call TypeDoc to automatically\ngenerate API documentation for your modules, including module lists, Interface\ndetails, function details (parameters, return values, description), etc. It will\nalso generate a documentation.json file for subsequent sidebar rendering.\n\nNote that the documentation is regenerated every time you start the project to\nreflect the latest module content. Therefore, we recommend adding the api\ndirectory to .gitignore. If you customize the output directory with the outDir\nparameter below, you should also add it to .gitignore.\n\nAlso, we do not recommend modifying or adding documents in the api directory\nbecause these documents will be overwritten each time the project is started due\nto changes in module content.\n\n\nParameter Description#\n\n\nentryPoints#\n\n * Type: string[]\n * Default: []\n\nSpecifies the absolute path of the TS modules for which documentation should be\ngenerated.\n\n\noutDir#\n\n * Type: string\n * Default: api\n\nCustomize the output directory for the documentation. You need to provide a\nrelative path, such as api/custom.","routePath":"/plugin/official-plugins/typedoc","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":107},{"text":"Usage","id":"usage","depth":2,"charIndex":123},{"text":"Parameter Description","id":"parameter-description","depth":2,"charIndex":1088},{"text":"entryPoints","id":"entrypoints","depth":3,"charIndex":1113},{"text":"outDir","id":"outdir","depth":3,"charIndex":1254}],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"Introduction","content":"#\n\nThe plugin system is a crucial part of Rspress, which allows you to easily\nextend the abilities of the framework during the process of building a site. So,\nwhat ability can you extend with plugins? Let's take a look at the overall\narchitecture of Rspress first.\n\nThe overall architecture of Rspress is shown in the figure below:\n\n\n\nThe overall framework is divided into two parts: Node Side and Browser Runtime.\nThrough the plugin system, you can easily extend the abilities of these two\nparts. Specifically, you can extend the ability to:\n\n * Markdown/MDX compilation。You can add remark/rehype plugins to extend the\n   compliation ability of Markdown/MDX.\n * Add custom page. On the basis of the framework's conventional routing, you\n   can also add new routes through plugins, such as adding a /blog route to\n   display a list of blogs, and the content is defined by yourself.\n * Custom build tool behavior.In the framework plugin, you can customize the\n   config of the underlying build tool Rspack, such as define, alias, and you\n   can also add custom Rspack plugins.\n * Extend page metadata. For each page, some metadata will be calculated inside\n   the framework, such as title, description, etc. You can extend the\n   calculation logic of these metadata through plugins, and pass usePageData\n   hook access.\n * Insert some custom logic before and after the build process. Such as closing\n   some event listeners after the build process ends.\n * Add global components. Rspress internally uses React for rendering. You can\n   flexibly extend the runtime page by defining global React components, such as\n   adding a global BackToTop (return to top) component, adding a global side\n   effect logic.","routePath":"/plugin/system/introduction","lang":"en","toc":[],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"Plugin API","content":"#\n\nIn the previous section, we introduced the basic structure of the plugin. In\nthis section, we will introduce the API of the plugin to help you understand the\nabilities of the plugin in more detail.\n\nTIP\n\nIn order to get better type hints, you can install @rspress/shared in the\nproject, and then `.\n\n\nglobalStyles#\n\n * Type：string\n\nIt is used to add a global style, and the absolute path of a style file is\npassed in, and the usage is as follows:\n\n\n\nFor example, if you want to modify the theme color, you can do so by adding a\nglobal style:\n\n\n\n\nglobalUIComponents#\n\n * Type：(string | [string, object])[]\n\nIt is used to add global components, passing in an array, each item in the array\nis the absolute path of a component, the usage is as follows:\n\n\n\nThe item of globalUIComponents can be a string, which is the path of the\ncomponent file, or an array, the first item is the path of the component file,\nand the second item is the component props, for example:\n\n\n\nWhen you register global components, the framework will automatically render\nthese React components in the theme without manually importing and using them.\n\nThrough global components, you can complete many custom functions, such as:\n\n\n\nIn this way, the content of the component will be rendered in the theme page,\nsuch as adding BackToTop button.\n\nIn the meanwhile, you can also use the global component to register some side\neffects, such as:\n\n\n\nThis way, side effects of components are executed in the theme page. For\nexample, some of the following scenarios require side effects:\n\n * Redirect for certain page routes.\n\n * Bind click event on the img tag of the page to implement the image zoom\n   function.\n\n * When the route changes, the PV data of different pages are reported.\n\n * ......\n\n\nbuilderConfig#\n\n * Type：RsbuildConfig\n\nThe bottom layer of Rspress is based Rsbuild for document build process. The\nRsbuild can be configured through builderConfig. For specific configuration\noptions, please refer to [Rsbuild(https://rsbuild.dev/config/).\n\n> Of course, if you want to configure Rspack directly, you can also configure it\n> through buildConfig.tools.rspack.\n\n\n\n\nconfig#\n\n * Type：(config: DocConfig, utils: ConfigUtils) => DocConfig | Promise\n\nThe type of ConfigUtils is as follows:\n\n\n\nIt is used to modify/extend the configuration of Rspress itself. For example, if\nyou want to modify the title of the document, you can do it through config:\n\n\n\nIf it involves adding and removing a plugin, you need to implement it through\naddPlugin and removePlugin:\n\n\n\n\nbeforeBuild/afterBuild#\n\n * Type：(config: DocConfig, isProd: boolean) => void | Promise\n\nIt is used to perform some operations before/after the document is built. The\nfirst parameter is the config of the document, and the second parameter is\nwhether it is currently a production environment. The usage is as follows:\n\n\n\nTIP\n\nWhen the beforeBuild hook is executed, the config plugins of all plugins have\nbeen processed, so the config parameter already represents the final document\nconfiguration.\n\n\nmarkdown#\n\n * Type：{ remarkPlugins?: Plugin[]; rehypePlugins?: Plugin[] }\n\nIt is used to extend the compilation ability of Markdown/MDX. If you want to add\ncustom remark/rehype plugins or MDX globalComponents, you can use markdown\noptions to achieve:\n\n\n\n\nextendPageData#\n\n * Type: (pageData: PageData) => void | Promise\n\n\n\nAfter extending the page data, you can access the page data through the\nusePageData hook in the theme.\n\n\n\n\naddPages#\n\n * Type: (config: UserConfig) => AddtionalPage[] | Promise\n\nThe config parameter is the doc config of rspress.config.ts, and the\nAddtionalPage type is defined as follows:\n\n\n\nUsed to add additional pages, you can return an array in the addPages function,\neach item in the array is a page config, you can specify the route of the page\nthrough routePath, through filepath or content to specify the content of the\npage. For example:\n\n\n\naddPages accepts two parameters, config is the config of the current document\nsite, isProd indicates whether it is a production environment.\n\n\nrouteGenerated#\n\n * Type：(routeMeta: RouteMeta[]) => void | Promise\n\nIn this hook, you can get all the route meta information. The structure of each\nroute meta information is as follows\n\n\n\n例子:\n\n\n\n\naddRuntimeModules#\n\n * Type: (config: UserConfig, isProd: boolean) => Record | Promise>;\n\nUsed to add additional runtime modules. For example, if you want to use some\ncompile-time information in the document, you can achieve this through\naddRuntimeModules:\n\n\n\nIn this way, you can use the virtual-xxx module in the runtime component:\n\n\n\nTIP\n\nThis hook is executed after the routeGenerated hook.","routePath":"/plugin/system/plugin-api","lang":"en","toc":[{"text":"globalStyles","id":"globalstyles","depth":3,"charIndex":303},{"text":"globalUIComponents","id":"globaluicomponents","depth":3,"charIndex":548},{"text":"builderConfig","id":"builderconfig","depth":3,"charIndex":1762},{"text":"config","id":"config","depth":3,"charIndex":2140},{"text":"beforeBuild/afterBuild","id":"beforebuildafterbuild","depth":3,"charIndex":2533},{"text":"markdown","id":"markdown","depth":3,"charIndex":3031},{"text":"extendPageData","id":"extendpagedata","depth":3,"charIndex":3286},{"text":"addPages","id":"addpages","depth":3,"charIndex":3461},{"text":"routeGenerated","id":"routegenerated","depth":3,"charIndex":4047},{"text":"addRuntimeModules","id":"addruntimemodules","depth":3,"charIndex":4244}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"Write a plugin","content":"#\n\nLet's inject a global component as an example to see how to define and use\nplugins.\n\nTIP\n\nIn order to get better type hints, you can install @rspress/shared in the\nproject, and then `.\n\n\n1. Define a plugin#\n\n\n\n\n\nA plugin is generally a function that receives some plugin params (optional) and\nreturns an object that contains the name of the plugin and other config.\n\nIn the above example, we define a plugin named plugin-example, which will define\na global environment variable process.env.SLUG during the build phase, and\ninject a global component Example.tsx in the document.\n\n\n2. Use a plugin#\n\nRegister plugins via plugins in rspress.config.ts:\n\n\n\nThen the Example component will be injected into the page and we can access the\nprocess.env.SLUG variable in the component.","routePath":"/plugin/system/write-a-plugin","lang":"en","toc":[{"text":"1. Define a plugin","id":"1-define-a-plugin","depth":3,"charIndex":189},{"text":"2. Use a plugin","id":"2-use-a-plugin","depth":3,"charIndex":582}],"domain":"","frontmatter":{},"version":""}]